
BinaryCount.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002e20  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  08002fa8  08002fa8  00012fa8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003018  08003018  00020090  2**0
                  CONTENTS
  4 .ARM          00000000  08003018  08003018  00020090  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003018  08003018  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003018  08003018  00013018  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800301c  0800301c  0001301c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  08003020  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000015c  20000090  080030b0  00020090  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001ec  080030b0  000201ec  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY
 13 .debug_info   000045f8  00000000  00000000  00020103  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001083  00000000  00000000  000246fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000578  00000000  00000000  0002577e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000003ff  00000000  00000000  00025cf6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024154  00000000  00000000  000260f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00005cdf  00000000  00000000  0004a249  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000de02a  00000000  00000000  0004ff28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00001adc  00000000  00000000  0012df54  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000090 	.word	0x20000090
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08002f90 	.word	0x08002f90

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000094 	.word	0x20000094
 80001c4:	08002f90 	.word	0x08002f90

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__gedf2>:
 8000964:	f04f 3cff 	mov.w	ip, #4294967295
 8000968:	e006      	b.n	8000978 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__ledf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	e002      	b.n	8000978 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__cmpdf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	f84d cd04 	str.w	ip, [sp, #-4]!
 800097c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000980:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800098e:	d01b      	beq.n	80009c8 <__cmpdf2+0x54>
 8000990:	b001      	add	sp, #4
 8000992:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000996:	bf0c      	ite	eq
 8000998:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800099c:	ea91 0f03 	teqne	r1, r3
 80009a0:	bf02      	ittt	eq
 80009a2:	ea90 0f02 	teqeq	r0, r2
 80009a6:	2000      	moveq	r0, #0
 80009a8:	4770      	bxeq	lr
 80009aa:	f110 0f00 	cmn.w	r0, #0
 80009ae:	ea91 0f03 	teq	r1, r3
 80009b2:	bf58      	it	pl
 80009b4:	4299      	cmppl	r1, r3
 80009b6:	bf08      	it	eq
 80009b8:	4290      	cmpeq	r0, r2
 80009ba:	bf2c      	ite	cs
 80009bc:	17d8      	asrcs	r0, r3, #31
 80009be:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009c2:	f040 0001 	orr.w	r0, r0, #1
 80009c6:	4770      	bx	lr
 80009c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d0:	d102      	bne.n	80009d8 <__cmpdf2+0x64>
 80009d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009d6:	d107      	bne.n	80009e8 <__cmpdf2+0x74>
 80009d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d1d6      	bne.n	8000990 <__cmpdf2+0x1c>
 80009e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009e6:	d0d3      	beq.n	8000990 <__cmpdf2+0x1c>
 80009e8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop

080009f0 <__aeabi_cdrcmple>:
 80009f0:	4684      	mov	ip, r0
 80009f2:	4610      	mov	r0, r2
 80009f4:	4662      	mov	r2, ip
 80009f6:	468c      	mov	ip, r1
 80009f8:	4619      	mov	r1, r3
 80009fa:	4663      	mov	r3, ip
 80009fc:	e000      	b.n	8000a00 <__aeabi_cdcmpeq>
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdcmpeq>:
 8000a00:	b501      	push	{r0, lr}
 8000a02:	f7ff ffb7 	bl	8000974 <__cmpdf2>
 8000a06:	2800      	cmp	r0, #0
 8000a08:	bf48      	it	mi
 8000a0a:	f110 0f00 	cmnmi.w	r0, #0
 8000a0e:	bd01      	pop	{r0, pc}

08000a10 <__aeabi_dcmpeq>:
 8000a10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a14:	f7ff fff4 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a18:	bf0c      	ite	eq
 8000a1a:	2001      	moveq	r0, #1
 8000a1c:	2000      	movne	r0, #0
 8000a1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a22:	bf00      	nop

08000a24 <__aeabi_dcmplt>:
 8000a24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a28:	f7ff ffea 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a2c:	bf34      	ite	cc
 8000a2e:	2001      	movcc	r0, #1
 8000a30:	2000      	movcs	r0, #0
 8000a32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a36:	bf00      	nop

08000a38 <__aeabi_dcmple>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff ffe0 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a40:	bf94      	ite	ls
 8000a42:	2001      	movls	r0, #1
 8000a44:	2000      	movhi	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmpge>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffce 	bl	80009f0 <__aeabi_cdrcmple>
 8000a54:	bf94      	ite	ls
 8000a56:	2001      	movls	r0, #1
 8000a58:	2000      	movhi	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmpgt>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffc4 	bl	80009f0 <__aeabi_cdrcmple>
 8000a68:	bf34      	ite	cc
 8000a6a:	2001      	movcc	r0, #1
 8000a6c:	2000      	movcs	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmpun>:
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	d102      	bne.n	8000a84 <__aeabi_dcmpun+0x10>
 8000a7e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a82:	d10a      	bne.n	8000a9a <__aeabi_dcmpun+0x26>
 8000a84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x20>
 8000a8e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a92:	d102      	bne.n	8000a9a <__aeabi_dcmpun+0x26>
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	f04f 0001 	mov.w	r0, #1
 8000a9e:	4770      	bx	lr

08000aa0 <__aeabi_d2iz>:
 8000aa0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000aa4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000aa8:	d215      	bcs.n	8000ad6 <__aeabi_d2iz+0x36>
 8000aaa:	d511      	bpl.n	8000ad0 <__aeabi_d2iz+0x30>
 8000aac:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ab0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ab4:	d912      	bls.n	8000adc <__aeabi_d2iz+0x3c>
 8000ab6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aba:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000abe:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ac2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ac6:	fa23 f002 	lsr.w	r0, r3, r2
 8000aca:	bf18      	it	ne
 8000acc:	4240      	negne	r0, r0
 8000ace:	4770      	bx	lr
 8000ad0:	f04f 0000 	mov.w	r0, #0
 8000ad4:	4770      	bx	lr
 8000ad6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ada:	d105      	bne.n	8000ae8 <__aeabi_d2iz+0x48>
 8000adc:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ae0:	bf08      	it	eq
 8000ae2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000ae6:	4770      	bx	lr
 8000ae8:	f04f 0000 	mov.w	r0, #0
 8000aec:	4770      	bx	lr
 8000aee:	bf00      	nop

08000af0 <Display>:
/* USER CODE BEGIN 0 */
int Count = 0;
void Display(int , int );

void Display(int No, int L)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b086      	sub	sp, #24
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	6078      	str	r0, [r7, #4]
 8000af8:	6039      	str	r1, [r7, #0]
	int j, m, i;
	m = L - 1;
 8000afa:	683b      	ldr	r3, [r7, #0]
 8000afc:	3b01      	subs	r3, #1
 8000afe:	617b      	str	r3, [r7, #20]
	for(i = 0; i < L; i++)
 8000b00:	2300      	movs	r3, #0
 8000b02:	613b      	str	r3, [r7, #16]
 8000b04:	e032      	b.n	8000b6c <Display+0x7c>
	{
		j = pow(2.0, m);
 8000b06:	6978      	ldr	r0, [r7, #20]
 8000b08:	f7ff fcb0 	bl	800046c <__aeabi_i2d>
 8000b0c:	4602      	mov	r2, r0
 8000b0e:	460b      	mov	r3, r1
 8000b10:	ec43 2b11 	vmov	d1, r2, r3
 8000b14:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 8000b80 <Display+0x90>
 8000b18:	f001 fb00 	bl	800211c <pow>
 8000b1c:	ec53 2b10 	vmov	r2, r3, d0
 8000b20:	4610      	mov	r0, r2
 8000b22:	4619      	mov	r1, r3
 8000b24:	f7ff ffbc 	bl	8000aa0 <__aeabi_d2iz>
 8000b28:	4603      	mov	r3, r0
 8000b2a:	60fb      	str	r3, [r7, #12]
		if((No & j) != 0)
 8000b2c:	687a      	ldr	r2, [r7, #4]
 8000b2e:	68fb      	ldr	r3, [r7, #12]
 8000b30:	4013      	ands	r3, r2
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d00a      	beq.n	8000b4c <Display+0x5c>
			HAL_GPIO_WritePin(GPIOC, LEDS[i], GPIO_PIN_SET);
 8000b36:	4a14      	ldr	r2, [pc, #80]	; (8000b88 <Display+0x98>)
 8000b38:	693b      	ldr	r3, [r7, #16]
 8000b3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b3e:	b29b      	uxth	r3, r3
 8000b40:	2201      	movs	r2, #1
 8000b42:	4619      	mov	r1, r3
 8000b44:	4811      	ldr	r0, [pc, #68]	; (8000b8c <Display+0x9c>)
 8000b46:	f000 fc73 	bl	8001430 <HAL_GPIO_WritePin>
 8000b4a:	e009      	b.n	8000b60 <Display+0x70>
		else
			HAL_GPIO_WritePin(GPIOC, LEDS[i], GPIO_PIN_RESET);
 8000b4c:	4a0e      	ldr	r2, [pc, #56]	; (8000b88 <Display+0x98>)
 8000b4e:	693b      	ldr	r3, [r7, #16]
 8000b50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b54:	b29b      	uxth	r3, r3
 8000b56:	2200      	movs	r2, #0
 8000b58:	4619      	mov	r1, r3
 8000b5a:	480c      	ldr	r0, [pc, #48]	; (8000b8c <Display+0x9c>)
 8000b5c:	f000 fc68 	bl	8001430 <HAL_GPIO_WritePin>
			m--;
 8000b60:	697b      	ldr	r3, [r7, #20]
 8000b62:	3b01      	subs	r3, #1
 8000b64:	617b      	str	r3, [r7, #20]
	for(i = 0; i < L; i++)
 8000b66:	693b      	ldr	r3, [r7, #16]
 8000b68:	3301      	adds	r3, #1
 8000b6a:	613b      	str	r3, [r7, #16]
 8000b6c:	693a      	ldr	r2, [r7, #16]
 8000b6e:	683b      	ldr	r3, [r7, #0]
 8000b70:	429a      	cmp	r2, r3
 8000b72:	dbc8      	blt.n	8000b06 <Display+0x16>
	}
}
 8000b74:	bf00      	nop
 8000b76:	bf00      	nop
 8000b78:	3718      	adds	r7, #24
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	bd80      	pop	{r7, pc}
 8000b7e:	bf00      	nop
 8000b80:	00000000 	.word	0x00000000
 8000b84:	40000000 	.word	0x40000000
 8000b88:	20000000 	.word	0x20000000
 8000b8c:	48000800 	.word	0x48000800

08000b90 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b94:	f000 f923 	bl	8000dde <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b98:	f000 f81c 	bl	8000bd4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b9c:	f000 f860 	bl	8000c60 <MX_GPIO_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  Display(Count, 8); // Display Count
 8000ba0:	4b0b      	ldr	r3, [pc, #44]	; (8000bd0 <main+0x40>)
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	2108      	movs	r1, #8
 8000ba6:	4618      	mov	r0, r3
 8000ba8:	f7ff ffa2 	bl	8000af0 <Display>
	  if(Count == 255) // If 255
 8000bac:	4b08      	ldr	r3, [pc, #32]	; (8000bd0 <main+0x40>)
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	2bff      	cmp	r3, #255	; 0xff
 8000bb2:	d103      	bne.n	8000bbc <main+0x2c>
		  Count = 0; // Reset to 0
 8000bb4:	4b06      	ldr	r3, [pc, #24]	; (8000bd0 <main+0x40>)
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	601a      	str	r2, [r3, #0]
 8000bba:	e004      	b.n	8000bc6 <main+0x36>
	  else // If not 255
		  Count++; // Increment Count
 8000bbc:	4b04      	ldr	r3, [pc, #16]	; (8000bd0 <main+0x40>)
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	3301      	adds	r3, #1
 8000bc2:	4a03      	ldr	r2, [pc, #12]	; (8000bd0 <main+0x40>)
 8000bc4:	6013      	str	r3, [r2, #0]

	  HAL_Delay(50); // Wait 1 second
 8000bc6:	2032      	movs	r0, #50	; 0x32
 8000bc8:	f000 f97e 	bl	8000ec8 <HAL_Delay>
	  Display(Count, 8); // Display Count
 8000bcc:	e7e8      	b.n	8000ba0 <main+0x10>
 8000bce:	bf00      	nop
 8000bd0:	200000ac 	.word	0x200000ac

08000bd4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b096      	sub	sp, #88	; 0x58
 8000bd8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000bda:	f107 0314 	add.w	r3, r7, #20
 8000bde:	2244      	movs	r2, #68	; 0x44
 8000be0:	2100      	movs	r1, #0
 8000be2:	4618      	mov	r0, r3
 8000be4:	f001 fa68 	bl	80020b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000be8:	463b      	mov	r3, r7
 8000bea:	2200      	movs	r2, #0
 8000bec:	601a      	str	r2, [r3, #0]
 8000bee:	605a      	str	r2, [r3, #4]
 8000bf0:	609a      	str	r2, [r3, #8]
 8000bf2:	60da      	str	r2, [r3, #12]
 8000bf4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000bf6:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000bfa:	f000 fc3f 	bl	800147c <HAL_PWREx_ControlVoltageScaling>
 8000bfe:	4603      	mov	r3, r0
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d001      	beq.n	8000c08 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000c04:	f000 f85c 	bl	8000cc0 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000c08:	2310      	movs	r3, #16
 8000c0a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000c0c:	2301      	movs	r3, #1
 8000c0e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000c10:	2300      	movs	r3, #0
 8000c12:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000c14:	2360      	movs	r3, #96	; 0x60
 8000c16:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000c18:	2300      	movs	r3, #0
 8000c1a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c1c:	f107 0314 	add.w	r3, r7, #20
 8000c20:	4618      	mov	r0, r3
 8000c22:	f000 fc81 	bl	8001528 <HAL_RCC_OscConfig>
 8000c26:	4603      	mov	r3, r0
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d001      	beq.n	8000c30 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 8000c2c:	f000 f848 	bl	8000cc0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c30:	230f      	movs	r3, #15
 8000c32:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000c34:	2300      	movs	r3, #0
 8000c36:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c38:	2300      	movs	r3, #0
 8000c3a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c40:	2300      	movs	r3, #0
 8000c42:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000c44:	463b      	mov	r3, r7
 8000c46:	2100      	movs	r1, #0
 8000c48:	4618      	mov	r0, r3
 8000c4a:	f001 f849 	bl	8001ce0 <HAL_RCC_ClockConfig>
 8000c4e:	4603      	mov	r3, r0
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d001      	beq.n	8000c58 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000c54:	f000 f834 	bl	8000cc0 <Error_Handler>
  }
}
 8000c58:	bf00      	nop
 8000c5a:	3758      	adds	r7, #88	; 0x58
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	bd80      	pop	{r7, pc}

08000c60 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b086      	sub	sp, #24
 8000c64:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c66:	1d3b      	adds	r3, r7, #4
 8000c68:	2200      	movs	r2, #0
 8000c6a:	601a      	str	r2, [r3, #0]
 8000c6c:	605a      	str	r2, [r3, #4]
 8000c6e:	609a      	str	r2, [r3, #8]
 8000c70:	60da      	str	r2, [r3, #12]
 8000c72:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c74:	4b10      	ldr	r3, [pc, #64]	; (8000cb8 <MX_GPIO_Init+0x58>)
 8000c76:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c78:	4a0f      	ldr	r2, [pc, #60]	; (8000cb8 <MX_GPIO_Init+0x58>)
 8000c7a:	f043 0304 	orr.w	r3, r3, #4
 8000c7e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c80:	4b0d      	ldr	r3, [pc, #52]	; (8000cb8 <MX_GPIO_Init+0x58>)
 8000c82:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c84:	f003 0304 	and.w	r3, r3, #4
 8000c88:	603b      	str	r3, [r7, #0]
 8000c8a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	21ff      	movs	r1, #255	; 0xff
 8000c90:	480a      	ldr	r0, [pc, #40]	; (8000cbc <MX_GPIO_Init+0x5c>)
 8000c92:	f000 fbcd 	bl	8001430 <HAL_GPIO_WritePin>
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pins : PC0 PC1 PC2 PC3
                           PC4 PC5 PC6 PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000c96:	23ff      	movs	r3, #255	; 0xff
 8000c98:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c9a:	2301      	movs	r3, #1
 8000c9c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ca6:	1d3b      	adds	r3, r7, #4
 8000ca8:	4619      	mov	r1, r3
 8000caa:	4804      	ldr	r0, [pc, #16]	; (8000cbc <MX_GPIO_Init+0x5c>)
 8000cac:	f000 fa16 	bl	80010dc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000cb0:	bf00      	nop
 8000cb2:	3718      	adds	r7, #24
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	bd80      	pop	{r7, pc}
 8000cb8:	40021000 	.word	0x40021000
 8000cbc:	48000800 	.word	0x48000800

08000cc0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cc4:	b672      	cpsid	i
}
 8000cc6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000cc8:	e7fe      	b.n	8000cc8 <Error_Handler+0x8>
	...

08000ccc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	b083      	sub	sp, #12
 8000cd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cd2:	4b0f      	ldr	r3, [pc, #60]	; (8000d10 <HAL_MspInit+0x44>)
 8000cd4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000cd6:	4a0e      	ldr	r2, [pc, #56]	; (8000d10 <HAL_MspInit+0x44>)
 8000cd8:	f043 0301 	orr.w	r3, r3, #1
 8000cdc:	6613      	str	r3, [r2, #96]	; 0x60
 8000cde:	4b0c      	ldr	r3, [pc, #48]	; (8000d10 <HAL_MspInit+0x44>)
 8000ce0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ce2:	f003 0301 	and.w	r3, r3, #1
 8000ce6:	607b      	str	r3, [r7, #4]
 8000ce8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cea:	4b09      	ldr	r3, [pc, #36]	; (8000d10 <HAL_MspInit+0x44>)
 8000cec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000cee:	4a08      	ldr	r2, [pc, #32]	; (8000d10 <HAL_MspInit+0x44>)
 8000cf0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000cf4:	6593      	str	r3, [r2, #88]	; 0x58
 8000cf6:	4b06      	ldr	r3, [pc, #24]	; (8000d10 <HAL_MspInit+0x44>)
 8000cf8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000cfa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cfe:	603b      	str	r3, [r7, #0]
 8000d00:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d02:	bf00      	nop
 8000d04:	370c      	adds	r7, #12
 8000d06:	46bd      	mov	sp, r7
 8000d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0c:	4770      	bx	lr
 8000d0e:	bf00      	nop
 8000d10:	40021000 	.word	0x40021000

08000d14 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d14:	b480      	push	{r7}
 8000d16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d18:	e7fe      	b.n	8000d18 <NMI_Handler+0x4>

08000d1a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d1a:	b480      	push	{r7}
 8000d1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d1e:	e7fe      	b.n	8000d1e <HardFault_Handler+0x4>

08000d20 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d20:	b480      	push	{r7}
 8000d22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d24:	e7fe      	b.n	8000d24 <MemManage_Handler+0x4>

08000d26 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d26:	b480      	push	{r7}
 8000d28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d2a:	e7fe      	b.n	8000d2a <BusFault_Handler+0x4>

08000d2c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d30:	e7fe      	b.n	8000d30 <UsageFault_Handler+0x4>

08000d32 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d32:	b480      	push	{r7}
 8000d34:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d36:	bf00      	nop
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3e:	4770      	bx	lr

08000d40 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d40:	b480      	push	{r7}
 8000d42:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d44:	bf00      	nop
 8000d46:	46bd      	mov	sp, r7
 8000d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4c:	4770      	bx	lr

08000d4e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d4e:	b480      	push	{r7}
 8000d50:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d52:	bf00      	nop
 8000d54:	46bd      	mov	sp, r7
 8000d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5a:	4770      	bx	lr

08000d5c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d60:	f000 f892 	bl	8000e88 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d64:	bf00      	nop
 8000d66:	bd80      	pop	{r7, pc}

08000d68 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000d6c:	4b06      	ldr	r3, [pc, #24]	; (8000d88 <SystemInit+0x20>)
 8000d6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d72:	4a05      	ldr	r2, [pc, #20]	; (8000d88 <SystemInit+0x20>)
 8000d74:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d78:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000d7c:	bf00      	nop
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d84:	4770      	bx	lr
 8000d86:	bf00      	nop
 8000d88:	e000ed00 	.word	0xe000ed00

08000d8c <Reset_Handler>:
 8000d8c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000dc4 <LoopForever+0x2>
 8000d90:	f7ff ffea 	bl	8000d68 <SystemInit>
 8000d94:	480c      	ldr	r0, [pc, #48]	; (8000dc8 <LoopForever+0x6>)
 8000d96:	490d      	ldr	r1, [pc, #52]	; (8000dcc <LoopForever+0xa>)
 8000d98:	4a0d      	ldr	r2, [pc, #52]	; (8000dd0 <LoopForever+0xe>)
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	e002      	b.n	8000da4 <LoopCopyDataInit>

08000d9e <CopyDataInit>:
 8000d9e:	58d4      	ldr	r4, [r2, r3]
 8000da0:	50c4      	str	r4, [r0, r3]
 8000da2:	3304      	adds	r3, #4

08000da4 <LoopCopyDataInit>:
 8000da4:	18c4      	adds	r4, r0, r3
 8000da6:	428c      	cmp	r4, r1
 8000da8:	d3f9      	bcc.n	8000d9e <CopyDataInit>
 8000daa:	4a0a      	ldr	r2, [pc, #40]	; (8000dd4 <LoopForever+0x12>)
 8000dac:	4c0a      	ldr	r4, [pc, #40]	; (8000dd8 <LoopForever+0x16>)
 8000dae:	2300      	movs	r3, #0
 8000db0:	e001      	b.n	8000db6 <LoopFillZerobss>

08000db2 <FillZerobss>:
 8000db2:	6013      	str	r3, [r2, #0]
 8000db4:	3204      	adds	r2, #4

08000db6 <LoopFillZerobss>:
 8000db6:	42a2      	cmp	r2, r4
 8000db8:	d3fb      	bcc.n	8000db2 <FillZerobss>
 8000dba:	f001 f98b 	bl	80020d4 <__libc_init_array>
 8000dbe:	f7ff fee7 	bl	8000b90 <main>

08000dc2 <LoopForever>:
 8000dc2:	e7fe      	b.n	8000dc2 <LoopForever>
 8000dc4:	20018000 	.word	0x20018000
 8000dc8:	20000000 	.word	0x20000000
 8000dcc:	20000090 	.word	0x20000090
 8000dd0:	08003020 	.word	0x08003020
 8000dd4:	20000090 	.word	0x20000090
 8000dd8:	200001ec 	.word	0x200001ec

08000ddc <ADC1_2_IRQHandler>:
 8000ddc:	e7fe      	b.n	8000ddc <ADC1_2_IRQHandler>

08000dde <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000dde:	b580      	push	{r7, lr}
 8000de0:	b082      	sub	sp, #8
 8000de2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000de4:	2300      	movs	r3, #0
 8000de6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000de8:	2003      	movs	r0, #3
 8000dea:	f000 f943 	bl	8001074 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000dee:	200f      	movs	r0, #15
 8000df0:	f000 f80e 	bl	8000e10 <HAL_InitTick>
 8000df4:	4603      	mov	r3, r0
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d002      	beq.n	8000e00 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000dfa:	2301      	movs	r3, #1
 8000dfc:	71fb      	strb	r3, [r7, #7]
 8000dfe:	e001      	b.n	8000e04 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000e00:	f7ff ff64 	bl	8000ccc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000e04:	79fb      	ldrb	r3, [r7, #7]
}
 8000e06:	4618      	mov	r0, r3
 8000e08:	3708      	adds	r7, #8
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	bd80      	pop	{r7, pc}
	...

08000e10 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b084      	sub	sp, #16
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000e18:	2300      	movs	r3, #0
 8000e1a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000e1c:	4b17      	ldr	r3, [pc, #92]	; (8000e7c <HAL_InitTick+0x6c>)
 8000e1e:	781b      	ldrb	r3, [r3, #0]
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d023      	beq.n	8000e6c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000e24:	4b16      	ldr	r3, [pc, #88]	; (8000e80 <HAL_InitTick+0x70>)
 8000e26:	681a      	ldr	r2, [r3, #0]
 8000e28:	4b14      	ldr	r3, [pc, #80]	; (8000e7c <HAL_InitTick+0x6c>)
 8000e2a:	781b      	ldrb	r3, [r3, #0]
 8000e2c:	4619      	mov	r1, r3
 8000e2e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e32:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e36:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	f000 f941 	bl	80010c2 <HAL_SYSTICK_Config>
 8000e40:	4603      	mov	r3, r0
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d10f      	bne.n	8000e66 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	2b0f      	cmp	r3, #15
 8000e4a:	d809      	bhi.n	8000e60 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	6879      	ldr	r1, [r7, #4]
 8000e50:	f04f 30ff 	mov.w	r0, #4294967295
 8000e54:	f000 f919 	bl	800108a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000e58:	4a0a      	ldr	r2, [pc, #40]	; (8000e84 <HAL_InitTick+0x74>)
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	6013      	str	r3, [r2, #0]
 8000e5e:	e007      	b.n	8000e70 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000e60:	2301      	movs	r3, #1
 8000e62:	73fb      	strb	r3, [r7, #15]
 8000e64:	e004      	b.n	8000e70 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000e66:	2301      	movs	r3, #1
 8000e68:	73fb      	strb	r3, [r7, #15]
 8000e6a:	e001      	b.n	8000e70 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000e6c:	2301      	movs	r3, #1
 8000e6e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000e70:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e72:	4618      	mov	r0, r3
 8000e74:	3710      	adds	r7, #16
 8000e76:	46bd      	mov	sp, r7
 8000e78:	bd80      	pop	{r7, pc}
 8000e7a:	bf00      	nop
 8000e7c:	20000028 	.word	0x20000028
 8000e80:	20000020 	.word	0x20000020
 8000e84:	20000024 	.word	0x20000024

08000e88 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000e8c:	4b06      	ldr	r3, [pc, #24]	; (8000ea8 <HAL_IncTick+0x20>)
 8000e8e:	781b      	ldrb	r3, [r3, #0]
 8000e90:	461a      	mov	r2, r3
 8000e92:	4b06      	ldr	r3, [pc, #24]	; (8000eac <HAL_IncTick+0x24>)
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	4413      	add	r3, r2
 8000e98:	4a04      	ldr	r2, [pc, #16]	; (8000eac <HAL_IncTick+0x24>)
 8000e9a:	6013      	str	r3, [r2, #0]
}
 8000e9c:	bf00      	nop
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea4:	4770      	bx	lr
 8000ea6:	bf00      	nop
 8000ea8:	20000028 	.word	0x20000028
 8000eac:	200000b0 	.word	0x200000b0

08000eb0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	af00      	add	r7, sp, #0
  return uwTick;
 8000eb4:	4b03      	ldr	r3, [pc, #12]	; (8000ec4 <HAL_GetTick+0x14>)
 8000eb6:	681b      	ldr	r3, [r3, #0]
}
 8000eb8:	4618      	mov	r0, r3
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec0:	4770      	bx	lr
 8000ec2:	bf00      	nop
 8000ec4:	200000b0 	.word	0x200000b0

08000ec8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b084      	sub	sp, #16
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ed0:	f7ff ffee 	bl	8000eb0 <HAL_GetTick>
 8000ed4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000eda:	68fb      	ldr	r3, [r7, #12]
 8000edc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ee0:	d005      	beq.n	8000eee <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000ee2:	4b0a      	ldr	r3, [pc, #40]	; (8000f0c <HAL_Delay+0x44>)
 8000ee4:	781b      	ldrb	r3, [r3, #0]
 8000ee6:	461a      	mov	r2, r3
 8000ee8:	68fb      	ldr	r3, [r7, #12]
 8000eea:	4413      	add	r3, r2
 8000eec:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000eee:	bf00      	nop
 8000ef0:	f7ff ffde 	bl	8000eb0 <HAL_GetTick>
 8000ef4:	4602      	mov	r2, r0
 8000ef6:	68bb      	ldr	r3, [r7, #8]
 8000ef8:	1ad3      	subs	r3, r2, r3
 8000efa:	68fa      	ldr	r2, [r7, #12]
 8000efc:	429a      	cmp	r2, r3
 8000efe:	d8f7      	bhi.n	8000ef0 <HAL_Delay+0x28>
  {
  }
}
 8000f00:	bf00      	nop
 8000f02:	bf00      	nop
 8000f04:	3710      	adds	r7, #16
 8000f06:	46bd      	mov	sp, r7
 8000f08:	bd80      	pop	{r7, pc}
 8000f0a:	bf00      	nop
 8000f0c:	20000028 	.word	0x20000028

08000f10 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f10:	b480      	push	{r7}
 8000f12:	b085      	sub	sp, #20
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	f003 0307 	and.w	r3, r3, #7
 8000f1e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f20:	4b0c      	ldr	r3, [pc, #48]	; (8000f54 <__NVIC_SetPriorityGrouping+0x44>)
 8000f22:	68db      	ldr	r3, [r3, #12]
 8000f24:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f26:	68ba      	ldr	r2, [r7, #8]
 8000f28:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f2c:	4013      	ands	r3, r2
 8000f2e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f30:	68fb      	ldr	r3, [r7, #12]
 8000f32:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f34:	68bb      	ldr	r3, [r7, #8]
 8000f36:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f38:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f3c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f40:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f42:	4a04      	ldr	r2, [pc, #16]	; (8000f54 <__NVIC_SetPriorityGrouping+0x44>)
 8000f44:	68bb      	ldr	r3, [r7, #8]
 8000f46:	60d3      	str	r3, [r2, #12]
}
 8000f48:	bf00      	nop
 8000f4a:	3714      	adds	r7, #20
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f52:	4770      	bx	lr
 8000f54:	e000ed00 	.word	0xe000ed00

08000f58 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f5c:	4b04      	ldr	r3, [pc, #16]	; (8000f70 <__NVIC_GetPriorityGrouping+0x18>)
 8000f5e:	68db      	ldr	r3, [r3, #12]
 8000f60:	0a1b      	lsrs	r3, r3, #8
 8000f62:	f003 0307 	and.w	r3, r3, #7
}
 8000f66:	4618      	mov	r0, r3
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6e:	4770      	bx	lr
 8000f70:	e000ed00 	.word	0xe000ed00

08000f74 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f74:	b480      	push	{r7}
 8000f76:	b083      	sub	sp, #12
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	6039      	str	r1, [r7, #0]
 8000f7e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	db0a      	blt.n	8000f9e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f88:	683b      	ldr	r3, [r7, #0]
 8000f8a:	b2da      	uxtb	r2, r3
 8000f8c:	490c      	ldr	r1, [pc, #48]	; (8000fc0 <__NVIC_SetPriority+0x4c>)
 8000f8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f92:	0112      	lsls	r2, r2, #4
 8000f94:	b2d2      	uxtb	r2, r2
 8000f96:	440b      	add	r3, r1
 8000f98:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f9c:	e00a      	b.n	8000fb4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f9e:	683b      	ldr	r3, [r7, #0]
 8000fa0:	b2da      	uxtb	r2, r3
 8000fa2:	4908      	ldr	r1, [pc, #32]	; (8000fc4 <__NVIC_SetPriority+0x50>)
 8000fa4:	79fb      	ldrb	r3, [r7, #7]
 8000fa6:	f003 030f 	and.w	r3, r3, #15
 8000faa:	3b04      	subs	r3, #4
 8000fac:	0112      	lsls	r2, r2, #4
 8000fae:	b2d2      	uxtb	r2, r2
 8000fb0:	440b      	add	r3, r1
 8000fb2:	761a      	strb	r2, [r3, #24]
}
 8000fb4:	bf00      	nop
 8000fb6:	370c      	adds	r7, #12
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbe:	4770      	bx	lr
 8000fc0:	e000e100 	.word	0xe000e100
 8000fc4:	e000ed00 	.word	0xe000ed00

08000fc8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	b089      	sub	sp, #36	; 0x24
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	60f8      	str	r0, [r7, #12]
 8000fd0:	60b9      	str	r1, [r7, #8]
 8000fd2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fd4:	68fb      	ldr	r3, [r7, #12]
 8000fd6:	f003 0307 	and.w	r3, r3, #7
 8000fda:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fdc:	69fb      	ldr	r3, [r7, #28]
 8000fde:	f1c3 0307 	rsb	r3, r3, #7
 8000fe2:	2b04      	cmp	r3, #4
 8000fe4:	bf28      	it	cs
 8000fe6:	2304      	movcs	r3, #4
 8000fe8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fea:	69fb      	ldr	r3, [r7, #28]
 8000fec:	3304      	adds	r3, #4
 8000fee:	2b06      	cmp	r3, #6
 8000ff0:	d902      	bls.n	8000ff8 <NVIC_EncodePriority+0x30>
 8000ff2:	69fb      	ldr	r3, [r7, #28]
 8000ff4:	3b03      	subs	r3, #3
 8000ff6:	e000      	b.n	8000ffa <NVIC_EncodePriority+0x32>
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ffc:	f04f 32ff 	mov.w	r2, #4294967295
 8001000:	69bb      	ldr	r3, [r7, #24]
 8001002:	fa02 f303 	lsl.w	r3, r2, r3
 8001006:	43da      	mvns	r2, r3
 8001008:	68bb      	ldr	r3, [r7, #8]
 800100a:	401a      	ands	r2, r3
 800100c:	697b      	ldr	r3, [r7, #20]
 800100e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001010:	f04f 31ff 	mov.w	r1, #4294967295
 8001014:	697b      	ldr	r3, [r7, #20]
 8001016:	fa01 f303 	lsl.w	r3, r1, r3
 800101a:	43d9      	mvns	r1, r3
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001020:	4313      	orrs	r3, r2
         );
}
 8001022:	4618      	mov	r0, r3
 8001024:	3724      	adds	r7, #36	; 0x24
 8001026:	46bd      	mov	sp, r7
 8001028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102c:	4770      	bx	lr
	...

08001030 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b082      	sub	sp, #8
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	3b01      	subs	r3, #1
 800103c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001040:	d301      	bcc.n	8001046 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001042:	2301      	movs	r3, #1
 8001044:	e00f      	b.n	8001066 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001046:	4a0a      	ldr	r2, [pc, #40]	; (8001070 <SysTick_Config+0x40>)
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	3b01      	subs	r3, #1
 800104c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800104e:	210f      	movs	r1, #15
 8001050:	f04f 30ff 	mov.w	r0, #4294967295
 8001054:	f7ff ff8e 	bl	8000f74 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001058:	4b05      	ldr	r3, [pc, #20]	; (8001070 <SysTick_Config+0x40>)
 800105a:	2200      	movs	r2, #0
 800105c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800105e:	4b04      	ldr	r3, [pc, #16]	; (8001070 <SysTick_Config+0x40>)
 8001060:	2207      	movs	r2, #7
 8001062:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001064:	2300      	movs	r3, #0
}
 8001066:	4618      	mov	r0, r3
 8001068:	3708      	adds	r7, #8
 800106a:	46bd      	mov	sp, r7
 800106c:	bd80      	pop	{r7, pc}
 800106e:	bf00      	nop
 8001070:	e000e010 	.word	0xe000e010

08001074 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b082      	sub	sp, #8
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800107c:	6878      	ldr	r0, [r7, #4]
 800107e:	f7ff ff47 	bl	8000f10 <__NVIC_SetPriorityGrouping>
}
 8001082:	bf00      	nop
 8001084:	3708      	adds	r7, #8
 8001086:	46bd      	mov	sp, r7
 8001088:	bd80      	pop	{r7, pc}

0800108a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800108a:	b580      	push	{r7, lr}
 800108c:	b086      	sub	sp, #24
 800108e:	af00      	add	r7, sp, #0
 8001090:	4603      	mov	r3, r0
 8001092:	60b9      	str	r1, [r7, #8]
 8001094:	607a      	str	r2, [r7, #4]
 8001096:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001098:	2300      	movs	r3, #0
 800109a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800109c:	f7ff ff5c 	bl	8000f58 <__NVIC_GetPriorityGrouping>
 80010a0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010a2:	687a      	ldr	r2, [r7, #4]
 80010a4:	68b9      	ldr	r1, [r7, #8]
 80010a6:	6978      	ldr	r0, [r7, #20]
 80010a8:	f7ff ff8e 	bl	8000fc8 <NVIC_EncodePriority>
 80010ac:	4602      	mov	r2, r0
 80010ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010b2:	4611      	mov	r1, r2
 80010b4:	4618      	mov	r0, r3
 80010b6:	f7ff ff5d 	bl	8000f74 <__NVIC_SetPriority>
}
 80010ba:	bf00      	nop
 80010bc:	3718      	adds	r7, #24
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}

080010c2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80010c2:	b580      	push	{r7, lr}
 80010c4:	b082      	sub	sp, #8
 80010c6:	af00      	add	r7, sp, #0
 80010c8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80010ca:	6878      	ldr	r0, [r7, #4]
 80010cc:	f7ff ffb0 	bl	8001030 <SysTick_Config>
 80010d0:	4603      	mov	r3, r0
}
 80010d2:	4618      	mov	r0, r3
 80010d4:	3708      	adds	r7, #8
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bd80      	pop	{r7, pc}
	...

080010dc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010dc:	b480      	push	{r7}
 80010de:	b087      	sub	sp, #28
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
 80010e4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80010e6:	2300      	movs	r3, #0
 80010e8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80010ea:	e17f      	b.n	80013ec <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80010ec:	683b      	ldr	r3, [r7, #0]
 80010ee:	681a      	ldr	r2, [r3, #0]
 80010f0:	2101      	movs	r1, #1
 80010f2:	697b      	ldr	r3, [r7, #20]
 80010f4:	fa01 f303 	lsl.w	r3, r1, r3
 80010f8:	4013      	ands	r3, r2
 80010fa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	2b00      	cmp	r3, #0
 8001100:	f000 8171 	beq.w	80013e6 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001104:	683b      	ldr	r3, [r7, #0]
 8001106:	685b      	ldr	r3, [r3, #4]
 8001108:	f003 0303 	and.w	r3, r3, #3
 800110c:	2b01      	cmp	r3, #1
 800110e:	d005      	beq.n	800111c <HAL_GPIO_Init+0x40>
 8001110:	683b      	ldr	r3, [r7, #0]
 8001112:	685b      	ldr	r3, [r3, #4]
 8001114:	f003 0303 	and.w	r3, r3, #3
 8001118:	2b02      	cmp	r3, #2
 800111a:	d130      	bne.n	800117e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	689b      	ldr	r3, [r3, #8]
 8001120:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001122:	697b      	ldr	r3, [r7, #20]
 8001124:	005b      	lsls	r3, r3, #1
 8001126:	2203      	movs	r2, #3
 8001128:	fa02 f303 	lsl.w	r3, r2, r3
 800112c:	43db      	mvns	r3, r3
 800112e:	693a      	ldr	r2, [r7, #16]
 8001130:	4013      	ands	r3, r2
 8001132:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001134:	683b      	ldr	r3, [r7, #0]
 8001136:	68da      	ldr	r2, [r3, #12]
 8001138:	697b      	ldr	r3, [r7, #20]
 800113a:	005b      	lsls	r3, r3, #1
 800113c:	fa02 f303 	lsl.w	r3, r2, r3
 8001140:	693a      	ldr	r2, [r7, #16]
 8001142:	4313      	orrs	r3, r2
 8001144:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	693a      	ldr	r2, [r7, #16]
 800114a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	685b      	ldr	r3, [r3, #4]
 8001150:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001152:	2201      	movs	r2, #1
 8001154:	697b      	ldr	r3, [r7, #20]
 8001156:	fa02 f303 	lsl.w	r3, r2, r3
 800115a:	43db      	mvns	r3, r3
 800115c:	693a      	ldr	r2, [r7, #16]
 800115e:	4013      	ands	r3, r2
 8001160:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001162:	683b      	ldr	r3, [r7, #0]
 8001164:	685b      	ldr	r3, [r3, #4]
 8001166:	091b      	lsrs	r3, r3, #4
 8001168:	f003 0201 	and.w	r2, r3, #1
 800116c:	697b      	ldr	r3, [r7, #20]
 800116e:	fa02 f303 	lsl.w	r3, r2, r3
 8001172:	693a      	ldr	r2, [r7, #16]
 8001174:	4313      	orrs	r3, r2
 8001176:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	693a      	ldr	r2, [r7, #16]
 800117c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800117e:	683b      	ldr	r3, [r7, #0]
 8001180:	685b      	ldr	r3, [r3, #4]
 8001182:	f003 0303 	and.w	r3, r3, #3
 8001186:	2b03      	cmp	r3, #3
 8001188:	d118      	bne.n	80011bc <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800118e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001190:	2201      	movs	r2, #1
 8001192:	697b      	ldr	r3, [r7, #20]
 8001194:	fa02 f303 	lsl.w	r3, r2, r3
 8001198:	43db      	mvns	r3, r3
 800119a:	693a      	ldr	r2, [r7, #16]
 800119c:	4013      	ands	r3, r2
 800119e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80011a0:	683b      	ldr	r3, [r7, #0]
 80011a2:	685b      	ldr	r3, [r3, #4]
 80011a4:	08db      	lsrs	r3, r3, #3
 80011a6:	f003 0201 	and.w	r2, r3, #1
 80011aa:	697b      	ldr	r3, [r7, #20]
 80011ac:	fa02 f303 	lsl.w	r3, r2, r3
 80011b0:	693a      	ldr	r2, [r7, #16]
 80011b2:	4313      	orrs	r3, r2
 80011b4:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	693a      	ldr	r2, [r7, #16]
 80011ba:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80011bc:	683b      	ldr	r3, [r7, #0]
 80011be:	685b      	ldr	r3, [r3, #4]
 80011c0:	f003 0303 	and.w	r3, r3, #3
 80011c4:	2b03      	cmp	r3, #3
 80011c6:	d017      	beq.n	80011f8 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	68db      	ldr	r3, [r3, #12]
 80011cc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80011ce:	697b      	ldr	r3, [r7, #20]
 80011d0:	005b      	lsls	r3, r3, #1
 80011d2:	2203      	movs	r2, #3
 80011d4:	fa02 f303 	lsl.w	r3, r2, r3
 80011d8:	43db      	mvns	r3, r3
 80011da:	693a      	ldr	r2, [r7, #16]
 80011dc:	4013      	ands	r3, r2
 80011de:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80011e0:	683b      	ldr	r3, [r7, #0]
 80011e2:	689a      	ldr	r2, [r3, #8]
 80011e4:	697b      	ldr	r3, [r7, #20]
 80011e6:	005b      	lsls	r3, r3, #1
 80011e8:	fa02 f303 	lsl.w	r3, r2, r3
 80011ec:	693a      	ldr	r2, [r7, #16]
 80011ee:	4313      	orrs	r3, r2
 80011f0:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	693a      	ldr	r2, [r7, #16]
 80011f6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011f8:	683b      	ldr	r3, [r7, #0]
 80011fa:	685b      	ldr	r3, [r3, #4]
 80011fc:	f003 0303 	and.w	r3, r3, #3
 8001200:	2b02      	cmp	r3, #2
 8001202:	d123      	bne.n	800124c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001204:	697b      	ldr	r3, [r7, #20]
 8001206:	08da      	lsrs	r2, r3, #3
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	3208      	adds	r2, #8
 800120c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001210:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001212:	697b      	ldr	r3, [r7, #20]
 8001214:	f003 0307 	and.w	r3, r3, #7
 8001218:	009b      	lsls	r3, r3, #2
 800121a:	220f      	movs	r2, #15
 800121c:	fa02 f303 	lsl.w	r3, r2, r3
 8001220:	43db      	mvns	r3, r3
 8001222:	693a      	ldr	r2, [r7, #16]
 8001224:	4013      	ands	r3, r2
 8001226:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001228:	683b      	ldr	r3, [r7, #0]
 800122a:	691a      	ldr	r2, [r3, #16]
 800122c:	697b      	ldr	r3, [r7, #20]
 800122e:	f003 0307 	and.w	r3, r3, #7
 8001232:	009b      	lsls	r3, r3, #2
 8001234:	fa02 f303 	lsl.w	r3, r2, r3
 8001238:	693a      	ldr	r2, [r7, #16]
 800123a:	4313      	orrs	r3, r2
 800123c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800123e:	697b      	ldr	r3, [r7, #20]
 8001240:	08da      	lsrs	r2, r3, #3
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	3208      	adds	r2, #8
 8001246:	6939      	ldr	r1, [r7, #16]
 8001248:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001252:	697b      	ldr	r3, [r7, #20]
 8001254:	005b      	lsls	r3, r3, #1
 8001256:	2203      	movs	r2, #3
 8001258:	fa02 f303 	lsl.w	r3, r2, r3
 800125c:	43db      	mvns	r3, r3
 800125e:	693a      	ldr	r2, [r7, #16]
 8001260:	4013      	ands	r3, r2
 8001262:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001264:	683b      	ldr	r3, [r7, #0]
 8001266:	685b      	ldr	r3, [r3, #4]
 8001268:	f003 0203 	and.w	r2, r3, #3
 800126c:	697b      	ldr	r3, [r7, #20]
 800126e:	005b      	lsls	r3, r3, #1
 8001270:	fa02 f303 	lsl.w	r3, r2, r3
 8001274:	693a      	ldr	r2, [r7, #16]
 8001276:	4313      	orrs	r3, r2
 8001278:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	693a      	ldr	r2, [r7, #16]
 800127e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001280:	683b      	ldr	r3, [r7, #0]
 8001282:	685b      	ldr	r3, [r3, #4]
 8001284:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001288:	2b00      	cmp	r3, #0
 800128a:	f000 80ac 	beq.w	80013e6 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800128e:	4b5f      	ldr	r3, [pc, #380]	; (800140c <HAL_GPIO_Init+0x330>)
 8001290:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001292:	4a5e      	ldr	r2, [pc, #376]	; (800140c <HAL_GPIO_Init+0x330>)
 8001294:	f043 0301 	orr.w	r3, r3, #1
 8001298:	6613      	str	r3, [r2, #96]	; 0x60
 800129a:	4b5c      	ldr	r3, [pc, #368]	; (800140c <HAL_GPIO_Init+0x330>)
 800129c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800129e:	f003 0301 	and.w	r3, r3, #1
 80012a2:	60bb      	str	r3, [r7, #8]
 80012a4:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80012a6:	4a5a      	ldr	r2, [pc, #360]	; (8001410 <HAL_GPIO_Init+0x334>)
 80012a8:	697b      	ldr	r3, [r7, #20]
 80012aa:	089b      	lsrs	r3, r3, #2
 80012ac:	3302      	adds	r3, #2
 80012ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012b2:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80012b4:	697b      	ldr	r3, [r7, #20]
 80012b6:	f003 0303 	and.w	r3, r3, #3
 80012ba:	009b      	lsls	r3, r3, #2
 80012bc:	220f      	movs	r2, #15
 80012be:	fa02 f303 	lsl.w	r3, r2, r3
 80012c2:	43db      	mvns	r3, r3
 80012c4:	693a      	ldr	r2, [r7, #16]
 80012c6:	4013      	ands	r3, r2
 80012c8:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80012d0:	d025      	beq.n	800131e <HAL_GPIO_Init+0x242>
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	4a4f      	ldr	r2, [pc, #316]	; (8001414 <HAL_GPIO_Init+0x338>)
 80012d6:	4293      	cmp	r3, r2
 80012d8:	d01f      	beq.n	800131a <HAL_GPIO_Init+0x23e>
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	4a4e      	ldr	r2, [pc, #312]	; (8001418 <HAL_GPIO_Init+0x33c>)
 80012de:	4293      	cmp	r3, r2
 80012e0:	d019      	beq.n	8001316 <HAL_GPIO_Init+0x23a>
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	4a4d      	ldr	r2, [pc, #308]	; (800141c <HAL_GPIO_Init+0x340>)
 80012e6:	4293      	cmp	r3, r2
 80012e8:	d013      	beq.n	8001312 <HAL_GPIO_Init+0x236>
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	4a4c      	ldr	r2, [pc, #304]	; (8001420 <HAL_GPIO_Init+0x344>)
 80012ee:	4293      	cmp	r3, r2
 80012f0:	d00d      	beq.n	800130e <HAL_GPIO_Init+0x232>
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	4a4b      	ldr	r2, [pc, #300]	; (8001424 <HAL_GPIO_Init+0x348>)
 80012f6:	4293      	cmp	r3, r2
 80012f8:	d007      	beq.n	800130a <HAL_GPIO_Init+0x22e>
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	4a4a      	ldr	r2, [pc, #296]	; (8001428 <HAL_GPIO_Init+0x34c>)
 80012fe:	4293      	cmp	r3, r2
 8001300:	d101      	bne.n	8001306 <HAL_GPIO_Init+0x22a>
 8001302:	2306      	movs	r3, #6
 8001304:	e00c      	b.n	8001320 <HAL_GPIO_Init+0x244>
 8001306:	2307      	movs	r3, #7
 8001308:	e00a      	b.n	8001320 <HAL_GPIO_Init+0x244>
 800130a:	2305      	movs	r3, #5
 800130c:	e008      	b.n	8001320 <HAL_GPIO_Init+0x244>
 800130e:	2304      	movs	r3, #4
 8001310:	e006      	b.n	8001320 <HAL_GPIO_Init+0x244>
 8001312:	2303      	movs	r3, #3
 8001314:	e004      	b.n	8001320 <HAL_GPIO_Init+0x244>
 8001316:	2302      	movs	r3, #2
 8001318:	e002      	b.n	8001320 <HAL_GPIO_Init+0x244>
 800131a:	2301      	movs	r3, #1
 800131c:	e000      	b.n	8001320 <HAL_GPIO_Init+0x244>
 800131e:	2300      	movs	r3, #0
 8001320:	697a      	ldr	r2, [r7, #20]
 8001322:	f002 0203 	and.w	r2, r2, #3
 8001326:	0092      	lsls	r2, r2, #2
 8001328:	4093      	lsls	r3, r2
 800132a:	693a      	ldr	r2, [r7, #16]
 800132c:	4313      	orrs	r3, r2
 800132e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001330:	4937      	ldr	r1, [pc, #220]	; (8001410 <HAL_GPIO_Init+0x334>)
 8001332:	697b      	ldr	r3, [r7, #20]
 8001334:	089b      	lsrs	r3, r3, #2
 8001336:	3302      	adds	r3, #2
 8001338:	693a      	ldr	r2, [r7, #16]
 800133a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800133e:	4b3b      	ldr	r3, [pc, #236]	; (800142c <HAL_GPIO_Init+0x350>)
 8001340:	689b      	ldr	r3, [r3, #8]
 8001342:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	43db      	mvns	r3, r3
 8001348:	693a      	ldr	r2, [r7, #16]
 800134a:	4013      	ands	r3, r2
 800134c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800134e:	683b      	ldr	r3, [r7, #0]
 8001350:	685b      	ldr	r3, [r3, #4]
 8001352:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001356:	2b00      	cmp	r3, #0
 8001358:	d003      	beq.n	8001362 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800135a:	693a      	ldr	r2, [r7, #16]
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	4313      	orrs	r3, r2
 8001360:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001362:	4a32      	ldr	r2, [pc, #200]	; (800142c <HAL_GPIO_Init+0x350>)
 8001364:	693b      	ldr	r3, [r7, #16]
 8001366:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001368:	4b30      	ldr	r3, [pc, #192]	; (800142c <HAL_GPIO_Init+0x350>)
 800136a:	68db      	ldr	r3, [r3, #12]
 800136c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800136e:	68fb      	ldr	r3, [r7, #12]
 8001370:	43db      	mvns	r3, r3
 8001372:	693a      	ldr	r2, [r7, #16]
 8001374:	4013      	ands	r3, r2
 8001376:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001378:	683b      	ldr	r3, [r7, #0]
 800137a:	685b      	ldr	r3, [r3, #4]
 800137c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001380:	2b00      	cmp	r3, #0
 8001382:	d003      	beq.n	800138c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001384:	693a      	ldr	r2, [r7, #16]
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	4313      	orrs	r3, r2
 800138a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800138c:	4a27      	ldr	r2, [pc, #156]	; (800142c <HAL_GPIO_Init+0x350>)
 800138e:	693b      	ldr	r3, [r7, #16]
 8001390:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001392:	4b26      	ldr	r3, [pc, #152]	; (800142c <HAL_GPIO_Init+0x350>)
 8001394:	685b      	ldr	r3, [r3, #4]
 8001396:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	43db      	mvns	r3, r3
 800139c:	693a      	ldr	r2, [r7, #16]
 800139e:	4013      	ands	r3, r2
 80013a0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80013a2:	683b      	ldr	r3, [r7, #0]
 80013a4:	685b      	ldr	r3, [r3, #4]
 80013a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d003      	beq.n	80013b6 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80013ae:	693a      	ldr	r2, [r7, #16]
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	4313      	orrs	r3, r2
 80013b4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80013b6:	4a1d      	ldr	r2, [pc, #116]	; (800142c <HAL_GPIO_Init+0x350>)
 80013b8:	693b      	ldr	r3, [r7, #16]
 80013ba:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80013bc:	4b1b      	ldr	r3, [pc, #108]	; (800142c <HAL_GPIO_Init+0x350>)
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	43db      	mvns	r3, r3
 80013c6:	693a      	ldr	r2, [r7, #16]
 80013c8:	4013      	ands	r3, r2
 80013ca:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80013cc:	683b      	ldr	r3, [r7, #0]
 80013ce:	685b      	ldr	r3, [r3, #4]
 80013d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d003      	beq.n	80013e0 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80013d8:	693a      	ldr	r2, [r7, #16]
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	4313      	orrs	r3, r2
 80013de:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80013e0:	4a12      	ldr	r2, [pc, #72]	; (800142c <HAL_GPIO_Init+0x350>)
 80013e2:	693b      	ldr	r3, [r7, #16]
 80013e4:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80013e6:	697b      	ldr	r3, [r7, #20]
 80013e8:	3301      	adds	r3, #1
 80013ea:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80013ec:	683b      	ldr	r3, [r7, #0]
 80013ee:	681a      	ldr	r2, [r3, #0]
 80013f0:	697b      	ldr	r3, [r7, #20]
 80013f2:	fa22 f303 	lsr.w	r3, r2, r3
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	f47f ae78 	bne.w	80010ec <HAL_GPIO_Init+0x10>
  }
}
 80013fc:	bf00      	nop
 80013fe:	bf00      	nop
 8001400:	371c      	adds	r7, #28
 8001402:	46bd      	mov	sp, r7
 8001404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001408:	4770      	bx	lr
 800140a:	bf00      	nop
 800140c:	40021000 	.word	0x40021000
 8001410:	40010000 	.word	0x40010000
 8001414:	48000400 	.word	0x48000400
 8001418:	48000800 	.word	0x48000800
 800141c:	48000c00 	.word	0x48000c00
 8001420:	48001000 	.word	0x48001000
 8001424:	48001400 	.word	0x48001400
 8001428:	48001800 	.word	0x48001800
 800142c:	40010400 	.word	0x40010400

08001430 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001430:	b480      	push	{r7}
 8001432:	b083      	sub	sp, #12
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
 8001438:	460b      	mov	r3, r1
 800143a:	807b      	strh	r3, [r7, #2]
 800143c:	4613      	mov	r3, r2
 800143e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001440:	787b      	ldrb	r3, [r7, #1]
 8001442:	2b00      	cmp	r3, #0
 8001444:	d003      	beq.n	800144e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001446:	887a      	ldrh	r2, [r7, #2]
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800144c:	e002      	b.n	8001454 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800144e:	887a      	ldrh	r2, [r7, #2]
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001454:	bf00      	nop
 8001456:	370c      	adds	r7, #12
 8001458:	46bd      	mov	sp, r7
 800145a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145e:	4770      	bx	lr

08001460 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001460:	b480      	push	{r7}
 8001462:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001464:	4b04      	ldr	r3, [pc, #16]	; (8001478 <HAL_PWREx_GetVoltageRange+0x18>)
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800146c:	4618      	mov	r0, r3
 800146e:	46bd      	mov	sp, r7
 8001470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001474:	4770      	bx	lr
 8001476:	bf00      	nop
 8001478:	40007000 	.word	0x40007000

0800147c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800147c:	b480      	push	{r7}
 800147e:	b085      	sub	sp, #20
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800148a:	d130      	bne.n	80014ee <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800148c:	4b23      	ldr	r3, [pc, #140]	; (800151c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001494:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001498:	d038      	beq.n	800150c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800149a:	4b20      	ldr	r3, [pc, #128]	; (800151c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80014a2:	4a1e      	ldr	r2, [pc, #120]	; (800151c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80014a4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80014a8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80014aa:	4b1d      	ldr	r3, [pc, #116]	; (8001520 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	2232      	movs	r2, #50	; 0x32
 80014b0:	fb02 f303 	mul.w	r3, r2, r3
 80014b4:	4a1b      	ldr	r2, [pc, #108]	; (8001524 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80014b6:	fba2 2303 	umull	r2, r3, r2, r3
 80014ba:	0c9b      	lsrs	r3, r3, #18
 80014bc:	3301      	adds	r3, #1
 80014be:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80014c0:	e002      	b.n	80014c8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	3b01      	subs	r3, #1
 80014c6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80014c8:	4b14      	ldr	r3, [pc, #80]	; (800151c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80014ca:	695b      	ldr	r3, [r3, #20]
 80014cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80014d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80014d4:	d102      	bne.n	80014dc <HAL_PWREx_ControlVoltageScaling+0x60>
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d1f2      	bne.n	80014c2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80014dc:	4b0f      	ldr	r3, [pc, #60]	; (800151c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80014de:	695b      	ldr	r3, [r3, #20]
 80014e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80014e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80014e8:	d110      	bne.n	800150c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80014ea:	2303      	movs	r3, #3
 80014ec:	e00f      	b.n	800150e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80014ee:	4b0b      	ldr	r3, [pc, #44]	; (800151c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80014f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80014fa:	d007      	beq.n	800150c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80014fc:	4b07      	ldr	r3, [pc, #28]	; (800151c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001504:	4a05      	ldr	r2, [pc, #20]	; (800151c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001506:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800150a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800150c:	2300      	movs	r3, #0
}
 800150e:	4618      	mov	r0, r3
 8001510:	3714      	adds	r7, #20
 8001512:	46bd      	mov	sp, r7
 8001514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001518:	4770      	bx	lr
 800151a:	bf00      	nop
 800151c:	40007000 	.word	0x40007000
 8001520:	20000020 	.word	0x20000020
 8001524:	431bde83 	.word	0x431bde83

08001528 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b088      	sub	sp, #32
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	2b00      	cmp	r3, #0
 8001534:	d101      	bne.n	800153a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001536:	2301      	movs	r3, #1
 8001538:	e3ca      	b.n	8001cd0 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800153a:	4b97      	ldr	r3, [pc, #604]	; (8001798 <HAL_RCC_OscConfig+0x270>)
 800153c:	689b      	ldr	r3, [r3, #8]
 800153e:	f003 030c 	and.w	r3, r3, #12
 8001542:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001544:	4b94      	ldr	r3, [pc, #592]	; (8001798 <HAL_RCC_OscConfig+0x270>)
 8001546:	68db      	ldr	r3, [r3, #12]
 8001548:	f003 0303 	and.w	r3, r3, #3
 800154c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	f003 0310 	and.w	r3, r3, #16
 8001556:	2b00      	cmp	r3, #0
 8001558:	f000 80e4 	beq.w	8001724 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800155c:	69bb      	ldr	r3, [r7, #24]
 800155e:	2b00      	cmp	r3, #0
 8001560:	d007      	beq.n	8001572 <HAL_RCC_OscConfig+0x4a>
 8001562:	69bb      	ldr	r3, [r7, #24]
 8001564:	2b0c      	cmp	r3, #12
 8001566:	f040 808b 	bne.w	8001680 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800156a:	697b      	ldr	r3, [r7, #20]
 800156c:	2b01      	cmp	r3, #1
 800156e:	f040 8087 	bne.w	8001680 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001572:	4b89      	ldr	r3, [pc, #548]	; (8001798 <HAL_RCC_OscConfig+0x270>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	f003 0302 	and.w	r3, r3, #2
 800157a:	2b00      	cmp	r3, #0
 800157c:	d005      	beq.n	800158a <HAL_RCC_OscConfig+0x62>
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	699b      	ldr	r3, [r3, #24]
 8001582:	2b00      	cmp	r3, #0
 8001584:	d101      	bne.n	800158a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001586:	2301      	movs	r3, #1
 8001588:	e3a2      	b.n	8001cd0 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	6a1a      	ldr	r2, [r3, #32]
 800158e:	4b82      	ldr	r3, [pc, #520]	; (8001798 <HAL_RCC_OscConfig+0x270>)
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	f003 0308 	and.w	r3, r3, #8
 8001596:	2b00      	cmp	r3, #0
 8001598:	d004      	beq.n	80015a4 <HAL_RCC_OscConfig+0x7c>
 800159a:	4b7f      	ldr	r3, [pc, #508]	; (8001798 <HAL_RCC_OscConfig+0x270>)
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80015a2:	e005      	b.n	80015b0 <HAL_RCC_OscConfig+0x88>
 80015a4:	4b7c      	ldr	r3, [pc, #496]	; (8001798 <HAL_RCC_OscConfig+0x270>)
 80015a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80015aa:	091b      	lsrs	r3, r3, #4
 80015ac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80015b0:	4293      	cmp	r3, r2
 80015b2:	d223      	bcs.n	80015fc <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	6a1b      	ldr	r3, [r3, #32]
 80015b8:	4618      	mov	r0, r3
 80015ba:	f000 fd1d 	bl	8001ff8 <RCC_SetFlashLatencyFromMSIRange>
 80015be:	4603      	mov	r3, r0
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d001      	beq.n	80015c8 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80015c4:	2301      	movs	r3, #1
 80015c6:	e383      	b.n	8001cd0 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80015c8:	4b73      	ldr	r3, [pc, #460]	; (8001798 <HAL_RCC_OscConfig+0x270>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	4a72      	ldr	r2, [pc, #456]	; (8001798 <HAL_RCC_OscConfig+0x270>)
 80015ce:	f043 0308 	orr.w	r3, r3, #8
 80015d2:	6013      	str	r3, [r2, #0]
 80015d4:	4b70      	ldr	r3, [pc, #448]	; (8001798 <HAL_RCC_OscConfig+0x270>)
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	6a1b      	ldr	r3, [r3, #32]
 80015e0:	496d      	ldr	r1, [pc, #436]	; (8001798 <HAL_RCC_OscConfig+0x270>)
 80015e2:	4313      	orrs	r3, r2
 80015e4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80015e6:	4b6c      	ldr	r3, [pc, #432]	; (8001798 <HAL_RCC_OscConfig+0x270>)
 80015e8:	685b      	ldr	r3, [r3, #4]
 80015ea:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	69db      	ldr	r3, [r3, #28]
 80015f2:	021b      	lsls	r3, r3, #8
 80015f4:	4968      	ldr	r1, [pc, #416]	; (8001798 <HAL_RCC_OscConfig+0x270>)
 80015f6:	4313      	orrs	r3, r2
 80015f8:	604b      	str	r3, [r1, #4]
 80015fa:	e025      	b.n	8001648 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80015fc:	4b66      	ldr	r3, [pc, #408]	; (8001798 <HAL_RCC_OscConfig+0x270>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	4a65      	ldr	r2, [pc, #404]	; (8001798 <HAL_RCC_OscConfig+0x270>)
 8001602:	f043 0308 	orr.w	r3, r3, #8
 8001606:	6013      	str	r3, [r2, #0]
 8001608:	4b63      	ldr	r3, [pc, #396]	; (8001798 <HAL_RCC_OscConfig+0x270>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	6a1b      	ldr	r3, [r3, #32]
 8001614:	4960      	ldr	r1, [pc, #384]	; (8001798 <HAL_RCC_OscConfig+0x270>)
 8001616:	4313      	orrs	r3, r2
 8001618:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800161a:	4b5f      	ldr	r3, [pc, #380]	; (8001798 <HAL_RCC_OscConfig+0x270>)
 800161c:	685b      	ldr	r3, [r3, #4]
 800161e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	69db      	ldr	r3, [r3, #28]
 8001626:	021b      	lsls	r3, r3, #8
 8001628:	495b      	ldr	r1, [pc, #364]	; (8001798 <HAL_RCC_OscConfig+0x270>)
 800162a:	4313      	orrs	r3, r2
 800162c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800162e:	69bb      	ldr	r3, [r7, #24]
 8001630:	2b00      	cmp	r3, #0
 8001632:	d109      	bne.n	8001648 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	6a1b      	ldr	r3, [r3, #32]
 8001638:	4618      	mov	r0, r3
 800163a:	f000 fcdd 	bl	8001ff8 <RCC_SetFlashLatencyFromMSIRange>
 800163e:	4603      	mov	r3, r0
 8001640:	2b00      	cmp	r3, #0
 8001642:	d001      	beq.n	8001648 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001644:	2301      	movs	r3, #1
 8001646:	e343      	b.n	8001cd0 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001648:	f000 fc4a 	bl	8001ee0 <HAL_RCC_GetSysClockFreq>
 800164c:	4602      	mov	r2, r0
 800164e:	4b52      	ldr	r3, [pc, #328]	; (8001798 <HAL_RCC_OscConfig+0x270>)
 8001650:	689b      	ldr	r3, [r3, #8]
 8001652:	091b      	lsrs	r3, r3, #4
 8001654:	f003 030f 	and.w	r3, r3, #15
 8001658:	4950      	ldr	r1, [pc, #320]	; (800179c <HAL_RCC_OscConfig+0x274>)
 800165a:	5ccb      	ldrb	r3, [r1, r3]
 800165c:	f003 031f 	and.w	r3, r3, #31
 8001660:	fa22 f303 	lsr.w	r3, r2, r3
 8001664:	4a4e      	ldr	r2, [pc, #312]	; (80017a0 <HAL_RCC_OscConfig+0x278>)
 8001666:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001668:	4b4e      	ldr	r3, [pc, #312]	; (80017a4 <HAL_RCC_OscConfig+0x27c>)
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	4618      	mov	r0, r3
 800166e:	f7ff fbcf 	bl	8000e10 <HAL_InitTick>
 8001672:	4603      	mov	r3, r0
 8001674:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001676:	7bfb      	ldrb	r3, [r7, #15]
 8001678:	2b00      	cmp	r3, #0
 800167a:	d052      	beq.n	8001722 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 800167c:	7bfb      	ldrb	r3, [r7, #15]
 800167e:	e327      	b.n	8001cd0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	699b      	ldr	r3, [r3, #24]
 8001684:	2b00      	cmp	r3, #0
 8001686:	d032      	beq.n	80016ee <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001688:	4b43      	ldr	r3, [pc, #268]	; (8001798 <HAL_RCC_OscConfig+0x270>)
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	4a42      	ldr	r2, [pc, #264]	; (8001798 <HAL_RCC_OscConfig+0x270>)
 800168e:	f043 0301 	orr.w	r3, r3, #1
 8001692:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001694:	f7ff fc0c 	bl	8000eb0 <HAL_GetTick>
 8001698:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800169a:	e008      	b.n	80016ae <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800169c:	f7ff fc08 	bl	8000eb0 <HAL_GetTick>
 80016a0:	4602      	mov	r2, r0
 80016a2:	693b      	ldr	r3, [r7, #16]
 80016a4:	1ad3      	subs	r3, r2, r3
 80016a6:	2b02      	cmp	r3, #2
 80016a8:	d901      	bls.n	80016ae <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80016aa:	2303      	movs	r3, #3
 80016ac:	e310      	b.n	8001cd0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80016ae:	4b3a      	ldr	r3, [pc, #232]	; (8001798 <HAL_RCC_OscConfig+0x270>)
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	f003 0302 	and.w	r3, r3, #2
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d0f0      	beq.n	800169c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80016ba:	4b37      	ldr	r3, [pc, #220]	; (8001798 <HAL_RCC_OscConfig+0x270>)
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	4a36      	ldr	r2, [pc, #216]	; (8001798 <HAL_RCC_OscConfig+0x270>)
 80016c0:	f043 0308 	orr.w	r3, r3, #8
 80016c4:	6013      	str	r3, [r2, #0]
 80016c6:	4b34      	ldr	r3, [pc, #208]	; (8001798 <HAL_RCC_OscConfig+0x270>)
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	6a1b      	ldr	r3, [r3, #32]
 80016d2:	4931      	ldr	r1, [pc, #196]	; (8001798 <HAL_RCC_OscConfig+0x270>)
 80016d4:	4313      	orrs	r3, r2
 80016d6:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80016d8:	4b2f      	ldr	r3, [pc, #188]	; (8001798 <HAL_RCC_OscConfig+0x270>)
 80016da:	685b      	ldr	r3, [r3, #4]
 80016dc:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	69db      	ldr	r3, [r3, #28]
 80016e4:	021b      	lsls	r3, r3, #8
 80016e6:	492c      	ldr	r1, [pc, #176]	; (8001798 <HAL_RCC_OscConfig+0x270>)
 80016e8:	4313      	orrs	r3, r2
 80016ea:	604b      	str	r3, [r1, #4]
 80016ec:	e01a      	b.n	8001724 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80016ee:	4b2a      	ldr	r3, [pc, #168]	; (8001798 <HAL_RCC_OscConfig+0x270>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	4a29      	ldr	r2, [pc, #164]	; (8001798 <HAL_RCC_OscConfig+0x270>)
 80016f4:	f023 0301 	bic.w	r3, r3, #1
 80016f8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80016fa:	f7ff fbd9 	bl	8000eb0 <HAL_GetTick>
 80016fe:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001700:	e008      	b.n	8001714 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001702:	f7ff fbd5 	bl	8000eb0 <HAL_GetTick>
 8001706:	4602      	mov	r2, r0
 8001708:	693b      	ldr	r3, [r7, #16]
 800170a:	1ad3      	subs	r3, r2, r3
 800170c:	2b02      	cmp	r3, #2
 800170e:	d901      	bls.n	8001714 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001710:	2303      	movs	r3, #3
 8001712:	e2dd      	b.n	8001cd0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001714:	4b20      	ldr	r3, [pc, #128]	; (8001798 <HAL_RCC_OscConfig+0x270>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	f003 0302 	and.w	r3, r3, #2
 800171c:	2b00      	cmp	r3, #0
 800171e:	d1f0      	bne.n	8001702 <HAL_RCC_OscConfig+0x1da>
 8001720:	e000      	b.n	8001724 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001722:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	f003 0301 	and.w	r3, r3, #1
 800172c:	2b00      	cmp	r3, #0
 800172e:	d074      	beq.n	800181a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001730:	69bb      	ldr	r3, [r7, #24]
 8001732:	2b08      	cmp	r3, #8
 8001734:	d005      	beq.n	8001742 <HAL_RCC_OscConfig+0x21a>
 8001736:	69bb      	ldr	r3, [r7, #24]
 8001738:	2b0c      	cmp	r3, #12
 800173a:	d10e      	bne.n	800175a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800173c:	697b      	ldr	r3, [r7, #20]
 800173e:	2b03      	cmp	r3, #3
 8001740:	d10b      	bne.n	800175a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001742:	4b15      	ldr	r3, [pc, #84]	; (8001798 <HAL_RCC_OscConfig+0x270>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800174a:	2b00      	cmp	r3, #0
 800174c:	d064      	beq.n	8001818 <HAL_RCC_OscConfig+0x2f0>
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	685b      	ldr	r3, [r3, #4]
 8001752:	2b00      	cmp	r3, #0
 8001754:	d160      	bne.n	8001818 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001756:	2301      	movs	r3, #1
 8001758:	e2ba      	b.n	8001cd0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	685b      	ldr	r3, [r3, #4]
 800175e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001762:	d106      	bne.n	8001772 <HAL_RCC_OscConfig+0x24a>
 8001764:	4b0c      	ldr	r3, [pc, #48]	; (8001798 <HAL_RCC_OscConfig+0x270>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	4a0b      	ldr	r2, [pc, #44]	; (8001798 <HAL_RCC_OscConfig+0x270>)
 800176a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800176e:	6013      	str	r3, [r2, #0]
 8001770:	e026      	b.n	80017c0 <HAL_RCC_OscConfig+0x298>
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	685b      	ldr	r3, [r3, #4]
 8001776:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800177a:	d115      	bne.n	80017a8 <HAL_RCC_OscConfig+0x280>
 800177c:	4b06      	ldr	r3, [pc, #24]	; (8001798 <HAL_RCC_OscConfig+0x270>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	4a05      	ldr	r2, [pc, #20]	; (8001798 <HAL_RCC_OscConfig+0x270>)
 8001782:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001786:	6013      	str	r3, [r2, #0]
 8001788:	4b03      	ldr	r3, [pc, #12]	; (8001798 <HAL_RCC_OscConfig+0x270>)
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	4a02      	ldr	r2, [pc, #8]	; (8001798 <HAL_RCC_OscConfig+0x270>)
 800178e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001792:	6013      	str	r3, [r2, #0]
 8001794:	e014      	b.n	80017c0 <HAL_RCC_OscConfig+0x298>
 8001796:	bf00      	nop
 8001798:	40021000 	.word	0x40021000
 800179c:	08002fa8 	.word	0x08002fa8
 80017a0:	20000020 	.word	0x20000020
 80017a4:	20000024 	.word	0x20000024
 80017a8:	4ba0      	ldr	r3, [pc, #640]	; (8001a2c <HAL_RCC_OscConfig+0x504>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	4a9f      	ldr	r2, [pc, #636]	; (8001a2c <HAL_RCC_OscConfig+0x504>)
 80017ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80017b2:	6013      	str	r3, [r2, #0]
 80017b4:	4b9d      	ldr	r3, [pc, #628]	; (8001a2c <HAL_RCC_OscConfig+0x504>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	4a9c      	ldr	r2, [pc, #624]	; (8001a2c <HAL_RCC_OscConfig+0x504>)
 80017ba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80017be:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	685b      	ldr	r3, [r3, #4]
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d013      	beq.n	80017f0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017c8:	f7ff fb72 	bl	8000eb0 <HAL_GetTick>
 80017cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80017ce:	e008      	b.n	80017e2 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80017d0:	f7ff fb6e 	bl	8000eb0 <HAL_GetTick>
 80017d4:	4602      	mov	r2, r0
 80017d6:	693b      	ldr	r3, [r7, #16]
 80017d8:	1ad3      	subs	r3, r2, r3
 80017da:	2b64      	cmp	r3, #100	; 0x64
 80017dc:	d901      	bls.n	80017e2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80017de:	2303      	movs	r3, #3
 80017e0:	e276      	b.n	8001cd0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80017e2:	4b92      	ldr	r3, [pc, #584]	; (8001a2c <HAL_RCC_OscConfig+0x504>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d0f0      	beq.n	80017d0 <HAL_RCC_OscConfig+0x2a8>
 80017ee:	e014      	b.n	800181a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017f0:	f7ff fb5e 	bl	8000eb0 <HAL_GetTick>
 80017f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80017f6:	e008      	b.n	800180a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80017f8:	f7ff fb5a 	bl	8000eb0 <HAL_GetTick>
 80017fc:	4602      	mov	r2, r0
 80017fe:	693b      	ldr	r3, [r7, #16]
 8001800:	1ad3      	subs	r3, r2, r3
 8001802:	2b64      	cmp	r3, #100	; 0x64
 8001804:	d901      	bls.n	800180a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001806:	2303      	movs	r3, #3
 8001808:	e262      	b.n	8001cd0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800180a:	4b88      	ldr	r3, [pc, #544]	; (8001a2c <HAL_RCC_OscConfig+0x504>)
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001812:	2b00      	cmp	r3, #0
 8001814:	d1f0      	bne.n	80017f8 <HAL_RCC_OscConfig+0x2d0>
 8001816:	e000      	b.n	800181a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001818:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	f003 0302 	and.w	r3, r3, #2
 8001822:	2b00      	cmp	r3, #0
 8001824:	d060      	beq.n	80018e8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001826:	69bb      	ldr	r3, [r7, #24]
 8001828:	2b04      	cmp	r3, #4
 800182a:	d005      	beq.n	8001838 <HAL_RCC_OscConfig+0x310>
 800182c:	69bb      	ldr	r3, [r7, #24]
 800182e:	2b0c      	cmp	r3, #12
 8001830:	d119      	bne.n	8001866 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001832:	697b      	ldr	r3, [r7, #20]
 8001834:	2b02      	cmp	r3, #2
 8001836:	d116      	bne.n	8001866 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001838:	4b7c      	ldr	r3, [pc, #496]	; (8001a2c <HAL_RCC_OscConfig+0x504>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001840:	2b00      	cmp	r3, #0
 8001842:	d005      	beq.n	8001850 <HAL_RCC_OscConfig+0x328>
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	68db      	ldr	r3, [r3, #12]
 8001848:	2b00      	cmp	r3, #0
 800184a:	d101      	bne.n	8001850 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800184c:	2301      	movs	r3, #1
 800184e:	e23f      	b.n	8001cd0 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001850:	4b76      	ldr	r3, [pc, #472]	; (8001a2c <HAL_RCC_OscConfig+0x504>)
 8001852:	685b      	ldr	r3, [r3, #4]
 8001854:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	691b      	ldr	r3, [r3, #16]
 800185c:	061b      	lsls	r3, r3, #24
 800185e:	4973      	ldr	r1, [pc, #460]	; (8001a2c <HAL_RCC_OscConfig+0x504>)
 8001860:	4313      	orrs	r3, r2
 8001862:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001864:	e040      	b.n	80018e8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	68db      	ldr	r3, [r3, #12]
 800186a:	2b00      	cmp	r3, #0
 800186c:	d023      	beq.n	80018b6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800186e:	4b6f      	ldr	r3, [pc, #444]	; (8001a2c <HAL_RCC_OscConfig+0x504>)
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	4a6e      	ldr	r2, [pc, #440]	; (8001a2c <HAL_RCC_OscConfig+0x504>)
 8001874:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001878:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800187a:	f7ff fb19 	bl	8000eb0 <HAL_GetTick>
 800187e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001880:	e008      	b.n	8001894 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001882:	f7ff fb15 	bl	8000eb0 <HAL_GetTick>
 8001886:	4602      	mov	r2, r0
 8001888:	693b      	ldr	r3, [r7, #16]
 800188a:	1ad3      	subs	r3, r2, r3
 800188c:	2b02      	cmp	r3, #2
 800188e:	d901      	bls.n	8001894 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001890:	2303      	movs	r3, #3
 8001892:	e21d      	b.n	8001cd0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001894:	4b65      	ldr	r3, [pc, #404]	; (8001a2c <HAL_RCC_OscConfig+0x504>)
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800189c:	2b00      	cmp	r3, #0
 800189e:	d0f0      	beq.n	8001882 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018a0:	4b62      	ldr	r3, [pc, #392]	; (8001a2c <HAL_RCC_OscConfig+0x504>)
 80018a2:	685b      	ldr	r3, [r3, #4]
 80018a4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	691b      	ldr	r3, [r3, #16]
 80018ac:	061b      	lsls	r3, r3, #24
 80018ae:	495f      	ldr	r1, [pc, #380]	; (8001a2c <HAL_RCC_OscConfig+0x504>)
 80018b0:	4313      	orrs	r3, r2
 80018b2:	604b      	str	r3, [r1, #4]
 80018b4:	e018      	b.n	80018e8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80018b6:	4b5d      	ldr	r3, [pc, #372]	; (8001a2c <HAL_RCC_OscConfig+0x504>)
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	4a5c      	ldr	r2, [pc, #368]	; (8001a2c <HAL_RCC_OscConfig+0x504>)
 80018bc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80018c0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018c2:	f7ff faf5 	bl	8000eb0 <HAL_GetTick>
 80018c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80018c8:	e008      	b.n	80018dc <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80018ca:	f7ff faf1 	bl	8000eb0 <HAL_GetTick>
 80018ce:	4602      	mov	r2, r0
 80018d0:	693b      	ldr	r3, [r7, #16]
 80018d2:	1ad3      	subs	r3, r2, r3
 80018d4:	2b02      	cmp	r3, #2
 80018d6:	d901      	bls.n	80018dc <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80018d8:	2303      	movs	r3, #3
 80018da:	e1f9      	b.n	8001cd0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80018dc:	4b53      	ldr	r3, [pc, #332]	; (8001a2c <HAL_RCC_OscConfig+0x504>)
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d1f0      	bne.n	80018ca <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	f003 0308 	and.w	r3, r3, #8
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d03c      	beq.n	800196e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	695b      	ldr	r3, [r3, #20]
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d01c      	beq.n	8001936 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80018fc:	4b4b      	ldr	r3, [pc, #300]	; (8001a2c <HAL_RCC_OscConfig+0x504>)
 80018fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001902:	4a4a      	ldr	r2, [pc, #296]	; (8001a2c <HAL_RCC_OscConfig+0x504>)
 8001904:	f043 0301 	orr.w	r3, r3, #1
 8001908:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800190c:	f7ff fad0 	bl	8000eb0 <HAL_GetTick>
 8001910:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001912:	e008      	b.n	8001926 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001914:	f7ff facc 	bl	8000eb0 <HAL_GetTick>
 8001918:	4602      	mov	r2, r0
 800191a:	693b      	ldr	r3, [r7, #16]
 800191c:	1ad3      	subs	r3, r2, r3
 800191e:	2b02      	cmp	r3, #2
 8001920:	d901      	bls.n	8001926 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001922:	2303      	movs	r3, #3
 8001924:	e1d4      	b.n	8001cd0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001926:	4b41      	ldr	r3, [pc, #260]	; (8001a2c <HAL_RCC_OscConfig+0x504>)
 8001928:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800192c:	f003 0302 	and.w	r3, r3, #2
 8001930:	2b00      	cmp	r3, #0
 8001932:	d0ef      	beq.n	8001914 <HAL_RCC_OscConfig+0x3ec>
 8001934:	e01b      	b.n	800196e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001936:	4b3d      	ldr	r3, [pc, #244]	; (8001a2c <HAL_RCC_OscConfig+0x504>)
 8001938:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800193c:	4a3b      	ldr	r2, [pc, #236]	; (8001a2c <HAL_RCC_OscConfig+0x504>)
 800193e:	f023 0301 	bic.w	r3, r3, #1
 8001942:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001946:	f7ff fab3 	bl	8000eb0 <HAL_GetTick>
 800194a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800194c:	e008      	b.n	8001960 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800194e:	f7ff faaf 	bl	8000eb0 <HAL_GetTick>
 8001952:	4602      	mov	r2, r0
 8001954:	693b      	ldr	r3, [r7, #16]
 8001956:	1ad3      	subs	r3, r2, r3
 8001958:	2b02      	cmp	r3, #2
 800195a:	d901      	bls.n	8001960 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800195c:	2303      	movs	r3, #3
 800195e:	e1b7      	b.n	8001cd0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001960:	4b32      	ldr	r3, [pc, #200]	; (8001a2c <HAL_RCC_OscConfig+0x504>)
 8001962:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001966:	f003 0302 	and.w	r3, r3, #2
 800196a:	2b00      	cmp	r3, #0
 800196c:	d1ef      	bne.n	800194e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f003 0304 	and.w	r3, r3, #4
 8001976:	2b00      	cmp	r3, #0
 8001978:	f000 80a6 	beq.w	8001ac8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800197c:	2300      	movs	r3, #0
 800197e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001980:	4b2a      	ldr	r3, [pc, #168]	; (8001a2c <HAL_RCC_OscConfig+0x504>)
 8001982:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001984:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001988:	2b00      	cmp	r3, #0
 800198a:	d10d      	bne.n	80019a8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800198c:	4b27      	ldr	r3, [pc, #156]	; (8001a2c <HAL_RCC_OscConfig+0x504>)
 800198e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001990:	4a26      	ldr	r2, [pc, #152]	; (8001a2c <HAL_RCC_OscConfig+0x504>)
 8001992:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001996:	6593      	str	r3, [r2, #88]	; 0x58
 8001998:	4b24      	ldr	r3, [pc, #144]	; (8001a2c <HAL_RCC_OscConfig+0x504>)
 800199a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800199c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019a0:	60bb      	str	r3, [r7, #8]
 80019a2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80019a4:	2301      	movs	r3, #1
 80019a6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80019a8:	4b21      	ldr	r3, [pc, #132]	; (8001a30 <HAL_RCC_OscConfig+0x508>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d118      	bne.n	80019e6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80019b4:	4b1e      	ldr	r3, [pc, #120]	; (8001a30 <HAL_RCC_OscConfig+0x508>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	4a1d      	ldr	r2, [pc, #116]	; (8001a30 <HAL_RCC_OscConfig+0x508>)
 80019ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019be:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80019c0:	f7ff fa76 	bl	8000eb0 <HAL_GetTick>
 80019c4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80019c6:	e008      	b.n	80019da <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80019c8:	f7ff fa72 	bl	8000eb0 <HAL_GetTick>
 80019cc:	4602      	mov	r2, r0
 80019ce:	693b      	ldr	r3, [r7, #16]
 80019d0:	1ad3      	subs	r3, r2, r3
 80019d2:	2b02      	cmp	r3, #2
 80019d4:	d901      	bls.n	80019da <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80019d6:	2303      	movs	r3, #3
 80019d8:	e17a      	b.n	8001cd0 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80019da:	4b15      	ldr	r3, [pc, #84]	; (8001a30 <HAL_RCC_OscConfig+0x508>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d0f0      	beq.n	80019c8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	689b      	ldr	r3, [r3, #8]
 80019ea:	2b01      	cmp	r3, #1
 80019ec:	d108      	bne.n	8001a00 <HAL_RCC_OscConfig+0x4d8>
 80019ee:	4b0f      	ldr	r3, [pc, #60]	; (8001a2c <HAL_RCC_OscConfig+0x504>)
 80019f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80019f4:	4a0d      	ldr	r2, [pc, #52]	; (8001a2c <HAL_RCC_OscConfig+0x504>)
 80019f6:	f043 0301 	orr.w	r3, r3, #1
 80019fa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80019fe:	e029      	b.n	8001a54 <HAL_RCC_OscConfig+0x52c>
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	689b      	ldr	r3, [r3, #8]
 8001a04:	2b05      	cmp	r3, #5
 8001a06:	d115      	bne.n	8001a34 <HAL_RCC_OscConfig+0x50c>
 8001a08:	4b08      	ldr	r3, [pc, #32]	; (8001a2c <HAL_RCC_OscConfig+0x504>)
 8001a0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a0e:	4a07      	ldr	r2, [pc, #28]	; (8001a2c <HAL_RCC_OscConfig+0x504>)
 8001a10:	f043 0304 	orr.w	r3, r3, #4
 8001a14:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001a18:	4b04      	ldr	r3, [pc, #16]	; (8001a2c <HAL_RCC_OscConfig+0x504>)
 8001a1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a1e:	4a03      	ldr	r2, [pc, #12]	; (8001a2c <HAL_RCC_OscConfig+0x504>)
 8001a20:	f043 0301 	orr.w	r3, r3, #1
 8001a24:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001a28:	e014      	b.n	8001a54 <HAL_RCC_OscConfig+0x52c>
 8001a2a:	bf00      	nop
 8001a2c:	40021000 	.word	0x40021000
 8001a30:	40007000 	.word	0x40007000
 8001a34:	4b9c      	ldr	r3, [pc, #624]	; (8001ca8 <HAL_RCC_OscConfig+0x780>)
 8001a36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a3a:	4a9b      	ldr	r2, [pc, #620]	; (8001ca8 <HAL_RCC_OscConfig+0x780>)
 8001a3c:	f023 0301 	bic.w	r3, r3, #1
 8001a40:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001a44:	4b98      	ldr	r3, [pc, #608]	; (8001ca8 <HAL_RCC_OscConfig+0x780>)
 8001a46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a4a:	4a97      	ldr	r2, [pc, #604]	; (8001ca8 <HAL_RCC_OscConfig+0x780>)
 8001a4c:	f023 0304 	bic.w	r3, r3, #4
 8001a50:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	689b      	ldr	r3, [r3, #8]
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d016      	beq.n	8001a8a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a5c:	f7ff fa28 	bl	8000eb0 <HAL_GetTick>
 8001a60:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001a62:	e00a      	b.n	8001a7a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a64:	f7ff fa24 	bl	8000eb0 <HAL_GetTick>
 8001a68:	4602      	mov	r2, r0
 8001a6a:	693b      	ldr	r3, [r7, #16]
 8001a6c:	1ad3      	subs	r3, r2, r3
 8001a6e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a72:	4293      	cmp	r3, r2
 8001a74:	d901      	bls.n	8001a7a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001a76:	2303      	movs	r3, #3
 8001a78:	e12a      	b.n	8001cd0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001a7a:	4b8b      	ldr	r3, [pc, #556]	; (8001ca8 <HAL_RCC_OscConfig+0x780>)
 8001a7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a80:	f003 0302 	and.w	r3, r3, #2
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d0ed      	beq.n	8001a64 <HAL_RCC_OscConfig+0x53c>
 8001a88:	e015      	b.n	8001ab6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a8a:	f7ff fa11 	bl	8000eb0 <HAL_GetTick>
 8001a8e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001a90:	e00a      	b.n	8001aa8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a92:	f7ff fa0d 	bl	8000eb0 <HAL_GetTick>
 8001a96:	4602      	mov	r2, r0
 8001a98:	693b      	ldr	r3, [r7, #16]
 8001a9a:	1ad3      	subs	r3, r2, r3
 8001a9c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001aa0:	4293      	cmp	r3, r2
 8001aa2:	d901      	bls.n	8001aa8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001aa4:	2303      	movs	r3, #3
 8001aa6:	e113      	b.n	8001cd0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001aa8:	4b7f      	ldr	r3, [pc, #508]	; (8001ca8 <HAL_RCC_OscConfig+0x780>)
 8001aaa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001aae:	f003 0302 	and.w	r3, r3, #2
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d1ed      	bne.n	8001a92 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001ab6:	7ffb      	ldrb	r3, [r7, #31]
 8001ab8:	2b01      	cmp	r3, #1
 8001aba:	d105      	bne.n	8001ac8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001abc:	4b7a      	ldr	r3, [pc, #488]	; (8001ca8 <HAL_RCC_OscConfig+0x780>)
 8001abe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ac0:	4a79      	ldr	r2, [pc, #484]	; (8001ca8 <HAL_RCC_OscConfig+0x780>)
 8001ac2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ac6:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	f000 80fe 	beq.w	8001cce <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ad6:	2b02      	cmp	r3, #2
 8001ad8:	f040 80d0 	bne.w	8001c7c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001adc:	4b72      	ldr	r3, [pc, #456]	; (8001ca8 <HAL_RCC_OscConfig+0x780>)
 8001ade:	68db      	ldr	r3, [r3, #12]
 8001ae0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ae2:	697b      	ldr	r3, [r7, #20]
 8001ae4:	f003 0203 	and.w	r2, r3, #3
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001aec:	429a      	cmp	r2, r3
 8001aee:	d130      	bne.n	8001b52 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001af0:	697b      	ldr	r3, [r7, #20]
 8001af2:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001afa:	3b01      	subs	r3, #1
 8001afc:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001afe:	429a      	cmp	r2, r3
 8001b00:	d127      	bne.n	8001b52 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001b02:	697b      	ldr	r3, [r7, #20]
 8001b04:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b0c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001b0e:	429a      	cmp	r2, r3
 8001b10:	d11f      	bne.n	8001b52 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001b12:	697b      	ldr	r3, [r7, #20]
 8001b14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b18:	687a      	ldr	r2, [r7, #4]
 8001b1a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001b1c:	2a07      	cmp	r2, #7
 8001b1e:	bf14      	ite	ne
 8001b20:	2201      	movne	r2, #1
 8001b22:	2200      	moveq	r2, #0
 8001b24:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001b26:	4293      	cmp	r3, r2
 8001b28:	d113      	bne.n	8001b52 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001b2a:	697b      	ldr	r3, [r7, #20]
 8001b2c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b34:	085b      	lsrs	r3, r3, #1
 8001b36:	3b01      	subs	r3, #1
 8001b38:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001b3a:	429a      	cmp	r2, r3
 8001b3c:	d109      	bne.n	8001b52 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001b3e:	697b      	ldr	r3, [r7, #20]
 8001b40:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b48:	085b      	lsrs	r3, r3, #1
 8001b4a:	3b01      	subs	r3, #1
 8001b4c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001b4e:	429a      	cmp	r2, r3
 8001b50:	d06e      	beq.n	8001c30 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001b52:	69bb      	ldr	r3, [r7, #24]
 8001b54:	2b0c      	cmp	r3, #12
 8001b56:	d069      	beq.n	8001c2c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001b58:	4b53      	ldr	r3, [pc, #332]	; (8001ca8 <HAL_RCC_OscConfig+0x780>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d105      	bne.n	8001b70 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001b64:	4b50      	ldr	r3, [pc, #320]	; (8001ca8 <HAL_RCC_OscConfig+0x780>)
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d001      	beq.n	8001b74 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001b70:	2301      	movs	r3, #1
 8001b72:	e0ad      	b.n	8001cd0 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001b74:	4b4c      	ldr	r3, [pc, #304]	; (8001ca8 <HAL_RCC_OscConfig+0x780>)
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	4a4b      	ldr	r2, [pc, #300]	; (8001ca8 <HAL_RCC_OscConfig+0x780>)
 8001b7a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001b7e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001b80:	f7ff f996 	bl	8000eb0 <HAL_GetTick>
 8001b84:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b86:	e008      	b.n	8001b9a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b88:	f7ff f992 	bl	8000eb0 <HAL_GetTick>
 8001b8c:	4602      	mov	r2, r0
 8001b8e:	693b      	ldr	r3, [r7, #16]
 8001b90:	1ad3      	subs	r3, r2, r3
 8001b92:	2b02      	cmp	r3, #2
 8001b94:	d901      	bls.n	8001b9a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001b96:	2303      	movs	r3, #3
 8001b98:	e09a      	b.n	8001cd0 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b9a:	4b43      	ldr	r3, [pc, #268]	; (8001ca8 <HAL_RCC_OscConfig+0x780>)
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d1f0      	bne.n	8001b88 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001ba6:	4b40      	ldr	r3, [pc, #256]	; (8001ca8 <HAL_RCC_OscConfig+0x780>)
 8001ba8:	68da      	ldr	r2, [r3, #12]
 8001baa:	4b40      	ldr	r3, [pc, #256]	; (8001cac <HAL_RCC_OscConfig+0x784>)
 8001bac:	4013      	ands	r3, r2
 8001bae:	687a      	ldr	r2, [r7, #4]
 8001bb0:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001bb2:	687a      	ldr	r2, [r7, #4]
 8001bb4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001bb6:	3a01      	subs	r2, #1
 8001bb8:	0112      	lsls	r2, r2, #4
 8001bba:	4311      	orrs	r1, r2
 8001bbc:	687a      	ldr	r2, [r7, #4]
 8001bbe:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001bc0:	0212      	lsls	r2, r2, #8
 8001bc2:	4311      	orrs	r1, r2
 8001bc4:	687a      	ldr	r2, [r7, #4]
 8001bc6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001bc8:	0852      	lsrs	r2, r2, #1
 8001bca:	3a01      	subs	r2, #1
 8001bcc:	0552      	lsls	r2, r2, #21
 8001bce:	4311      	orrs	r1, r2
 8001bd0:	687a      	ldr	r2, [r7, #4]
 8001bd2:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001bd4:	0852      	lsrs	r2, r2, #1
 8001bd6:	3a01      	subs	r2, #1
 8001bd8:	0652      	lsls	r2, r2, #25
 8001bda:	4311      	orrs	r1, r2
 8001bdc:	687a      	ldr	r2, [r7, #4]
 8001bde:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001be0:	0912      	lsrs	r2, r2, #4
 8001be2:	0452      	lsls	r2, r2, #17
 8001be4:	430a      	orrs	r2, r1
 8001be6:	4930      	ldr	r1, [pc, #192]	; (8001ca8 <HAL_RCC_OscConfig+0x780>)
 8001be8:	4313      	orrs	r3, r2
 8001bea:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001bec:	4b2e      	ldr	r3, [pc, #184]	; (8001ca8 <HAL_RCC_OscConfig+0x780>)
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	4a2d      	ldr	r2, [pc, #180]	; (8001ca8 <HAL_RCC_OscConfig+0x780>)
 8001bf2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001bf6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001bf8:	4b2b      	ldr	r3, [pc, #172]	; (8001ca8 <HAL_RCC_OscConfig+0x780>)
 8001bfa:	68db      	ldr	r3, [r3, #12]
 8001bfc:	4a2a      	ldr	r2, [pc, #168]	; (8001ca8 <HAL_RCC_OscConfig+0x780>)
 8001bfe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001c02:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001c04:	f7ff f954 	bl	8000eb0 <HAL_GetTick>
 8001c08:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c0a:	e008      	b.n	8001c1e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c0c:	f7ff f950 	bl	8000eb0 <HAL_GetTick>
 8001c10:	4602      	mov	r2, r0
 8001c12:	693b      	ldr	r3, [r7, #16]
 8001c14:	1ad3      	subs	r3, r2, r3
 8001c16:	2b02      	cmp	r3, #2
 8001c18:	d901      	bls.n	8001c1e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001c1a:	2303      	movs	r3, #3
 8001c1c:	e058      	b.n	8001cd0 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c1e:	4b22      	ldr	r3, [pc, #136]	; (8001ca8 <HAL_RCC_OscConfig+0x780>)
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d0f0      	beq.n	8001c0c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001c2a:	e050      	b.n	8001cce <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001c2c:	2301      	movs	r3, #1
 8001c2e:	e04f      	b.n	8001cd0 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c30:	4b1d      	ldr	r3, [pc, #116]	; (8001ca8 <HAL_RCC_OscConfig+0x780>)
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d148      	bne.n	8001cce <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001c3c:	4b1a      	ldr	r3, [pc, #104]	; (8001ca8 <HAL_RCC_OscConfig+0x780>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	4a19      	ldr	r2, [pc, #100]	; (8001ca8 <HAL_RCC_OscConfig+0x780>)
 8001c42:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001c46:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001c48:	4b17      	ldr	r3, [pc, #92]	; (8001ca8 <HAL_RCC_OscConfig+0x780>)
 8001c4a:	68db      	ldr	r3, [r3, #12]
 8001c4c:	4a16      	ldr	r2, [pc, #88]	; (8001ca8 <HAL_RCC_OscConfig+0x780>)
 8001c4e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001c52:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001c54:	f7ff f92c 	bl	8000eb0 <HAL_GetTick>
 8001c58:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c5a:	e008      	b.n	8001c6e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c5c:	f7ff f928 	bl	8000eb0 <HAL_GetTick>
 8001c60:	4602      	mov	r2, r0
 8001c62:	693b      	ldr	r3, [r7, #16]
 8001c64:	1ad3      	subs	r3, r2, r3
 8001c66:	2b02      	cmp	r3, #2
 8001c68:	d901      	bls.n	8001c6e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001c6a:	2303      	movs	r3, #3
 8001c6c:	e030      	b.n	8001cd0 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c6e:	4b0e      	ldr	r3, [pc, #56]	; (8001ca8 <HAL_RCC_OscConfig+0x780>)
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d0f0      	beq.n	8001c5c <HAL_RCC_OscConfig+0x734>
 8001c7a:	e028      	b.n	8001cce <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001c7c:	69bb      	ldr	r3, [r7, #24]
 8001c7e:	2b0c      	cmp	r3, #12
 8001c80:	d023      	beq.n	8001cca <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c82:	4b09      	ldr	r3, [pc, #36]	; (8001ca8 <HAL_RCC_OscConfig+0x780>)
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	4a08      	ldr	r2, [pc, #32]	; (8001ca8 <HAL_RCC_OscConfig+0x780>)
 8001c88:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001c8c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c8e:	f7ff f90f 	bl	8000eb0 <HAL_GetTick>
 8001c92:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c94:	e00c      	b.n	8001cb0 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c96:	f7ff f90b 	bl	8000eb0 <HAL_GetTick>
 8001c9a:	4602      	mov	r2, r0
 8001c9c:	693b      	ldr	r3, [r7, #16]
 8001c9e:	1ad3      	subs	r3, r2, r3
 8001ca0:	2b02      	cmp	r3, #2
 8001ca2:	d905      	bls.n	8001cb0 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8001ca4:	2303      	movs	r3, #3
 8001ca6:	e013      	b.n	8001cd0 <HAL_RCC_OscConfig+0x7a8>
 8001ca8:	40021000 	.word	0x40021000
 8001cac:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001cb0:	4b09      	ldr	r3, [pc, #36]	; (8001cd8 <HAL_RCC_OscConfig+0x7b0>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d1ec      	bne.n	8001c96 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001cbc:	4b06      	ldr	r3, [pc, #24]	; (8001cd8 <HAL_RCC_OscConfig+0x7b0>)
 8001cbe:	68da      	ldr	r2, [r3, #12]
 8001cc0:	4905      	ldr	r1, [pc, #20]	; (8001cd8 <HAL_RCC_OscConfig+0x7b0>)
 8001cc2:	4b06      	ldr	r3, [pc, #24]	; (8001cdc <HAL_RCC_OscConfig+0x7b4>)
 8001cc4:	4013      	ands	r3, r2
 8001cc6:	60cb      	str	r3, [r1, #12]
 8001cc8:	e001      	b.n	8001cce <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001cca:	2301      	movs	r3, #1
 8001ccc:	e000      	b.n	8001cd0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8001cce:	2300      	movs	r3, #0
}
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	3720      	adds	r7, #32
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	bd80      	pop	{r7, pc}
 8001cd8:	40021000 	.word	0x40021000
 8001cdc:	feeefffc 	.word	0xfeeefffc

08001ce0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b084      	sub	sp, #16
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
 8001ce8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d101      	bne.n	8001cf4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001cf0:	2301      	movs	r3, #1
 8001cf2:	e0e7      	b.n	8001ec4 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001cf4:	4b75      	ldr	r3, [pc, #468]	; (8001ecc <HAL_RCC_ClockConfig+0x1ec>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f003 0307 	and.w	r3, r3, #7
 8001cfc:	683a      	ldr	r2, [r7, #0]
 8001cfe:	429a      	cmp	r2, r3
 8001d00:	d910      	bls.n	8001d24 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d02:	4b72      	ldr	r3, [pc, #456]	; (8001ecc <HAL_RCC_ClockConfig+0x1ec>)
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f023 0207 	bic.w	r2, r3, #7
 8001d0a:	4970      	ldr	r1, [pc, #448]	; (8001ecc <HAL_RCC_ClockConfig+0x1ec>)
 8001d0c:	683b      	ldr	r3, [r7, #0]
 8001d0e:	4313      	orrs	r3, r2
 8001d10:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d12:	4b6e      	ldr	r3, [pc, #440]	; (8001ecc <HAL_RCC_ClockConfig+0x1ec>)
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f003 0307 	and.w	r3, r3, #7
 8001d1a:	683a      	ldr	r2, [r7, #0]
 8001d1c:	429a      	cmp	r2, r3
 8001d1e:	d001      	beq.n	8001d24 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001d20:	2301      	movs	r3, #1
 8001d22:	e0cf      	b.n	8001ec4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f003 0302 	and.w	r3, r3, #2
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d010      	beq.n	8001d52 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	689a      	ldr	r2, [r3, #8]
 8001d34:	4b66      	ldr	r3, [pc, #408]	; (8001ed0 <HAL_RCC_ClockConfig+0x1f0>)
 8001d36:	689b      	ldr	r3, [r3, #8]
 8001d38:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001d3c:	429a      	cmp	r2, r3
 8001d3e:	d908      	bls.n	8001d52 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d40:	4b63      	ldr	r3, [pc, #396]	; (8001ed0 <HAL_RCC_ClockConfig+0x1f0>)
 8001d42:	689b      	ldr	r3, [r3, #8]
 8001d44:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	689b      	ldr	r3, [r3, #8]
 8001d4c:	4960      	ldr	r1, [pc, #384]	; (8001ed0 <HAL_RCC_ClockConfig+0x1f0>)
 8001d4e:	4313      	orrs	r3, r2
 8001d50:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f003 0301 	and.w	r3, r3, #1
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d04c      	beq.n	8001df8 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	685b      	ldr	r3, [r3, #4]
 8001d62:	2b03      	cmp	r3, #3
 8001d64:	d107      	bne.n	8001d76 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d66:	4b5a      	ldr	r3, [pc, #360]	; (8001ed0 <HAL_RCC_ClockConfig+0x1f0>)
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d121      	bne.n	8001db6 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001d72:	2301      	movs	r3, #1
 8001d74:	e0a6      	b.n	8001ec4 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	685b      	ldr	r3, [r3, #4]
 8001d7a:	2b02      	cmp	r3, #2
 8001d7c:	d107      	bne.n	8001d8e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001d7e:	4b54      	ldr	r3, [pc, #336]	; (8001ed0 <HAL_RCC_ClockConfig+0x1f0>)
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d115      	bne.n	8001db6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001d8a:	2301      	movs	r3, #1
 8001d8c:	e09a      	b.n	8001ec4 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	685b      	ldr	r3, [r3, #4]
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d107      	bne.n	8001da6 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001d96:	4b4e      	ldr	r3, [pc, #312]	; (8001ed0 <HAL_RCC_ClockConfig+0x1f0>)
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f003 0302 	and.w	r3, r3, #2
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d109      	bne.n	8001db6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001da2:	2301      	movs	r3, #1
 8001da4:	e08e      	b.n	8001ec4 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001da6:	4b4a      	ldr	r3, [pc, #296]	; (8001ed0 <HAL_RCC_ClockConfig+0x1f0>)
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d101      	bne.n	8001db6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001db2:	2301      	movs	r3, #1
 8001db4:	e086      	b.n	8001ec4 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001db6:	4b46      	ldr	r3, [pc, #280]	; (8001ed0 <HAL_RCC_ClockConfig+0x1f0>)
 8001db8:	689b      	ldr	r3, [r3, #8]
 8001dba:	f023 0203 	bic.w	r2, r3, #3
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	685b      	ldr	r3, [r3, #4]
 8001dc2:	4943      	ldr	r1, [pc, #268]	; (8001ed0 <HAL_RCC_ClockConfig+0x1f0>)
 8001dc4:	4313      	orrs	r3, r2
 8001dc6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001dc8:	f7ff f872 	bl	8000eb0 <HAL_GetTick>
 8001dcc:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001dce:	e00a      	b.n	8001de6 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001dd0:	f7ff f86e 	bl	8000eb0 <HAL_GetTick>
 8001dd4:	4602      	mov	r2, r0
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	1ad3      	subs	r3, r2, r3
 8001dda:	f241 3288 	movw	r2, #5000	; 0x1388
 8001dde:	4293      	cmp	r3, r2
 8001de0:	d901      	bls.n	8001de6 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001de2:	2303      	movs	r3, #3
 8001de4:	e06e      	b.n	8001ec4 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001de6:	4b3a      	ldr	r3, [pc, #232]	; (8001ed0 <HAL_RCC_ClockConfig+0x1f0>)
 8001de8:	689b      	ldr	r3, [r3, #8]
 8001dea:	f003 020c 	and.w	r2, r3, #12
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	685b      	ldr	r3, [r3, #4]
 8001df2:	009b      	lsls	r3, r3, #2
 8001df4:	429a      	cmp	r2, r3
 8001df6:	d1eb      	bne.n	8001dd0 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f003 0302 	and.w	r3, r3, #2
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d010      	beq.n	8001e26 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	689a      	ldr	r2, [r3, #8]
 8001e08:	4b31      	ldr	r3, [pc, #196]	; (8001ed0 <HAL_RCC_ClockConfig+0x1f0>)
 8001e0a:	689b      	ldr	r3, [r3, #8]
 8001e0c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001e10:	429a      	cmp	r2, r3
 8001e12:	d208      	bcs.n	8001e26 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e14:	4b2e      	ldr	r3, [pc, #184]	; (8001ed0 <HAL_RCC_ClockConfig+0x1f0>)
 8001e16:	689b      	ldr	r3, [r3, #8]
 8001e18:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	689b      	ldr	r3, [r3, #8]
 8001e20:	492b      	ldr	r1, [pc, #172]	; (8001ed0 <HAL_RCC_ClockConfig+0x1f0>)
 8001e22:	4313      	orrs	r3, r2
 8001e24:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001e26:	4b29      	ldr	r3, [pc, #164]	; (8001ecc <HAL_RCC_ClockConfig+0x1ec>)
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f003 0307 	and.w	r3, r3, #7
 8001e2e:	683a      	ldr	r2, [r7, #0]
 8001e30:	429a      	cmp	r2, r3
 8001e32:	d210      	bcs.n	8001e56 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e34:	4b25      	ldr	r3, [pc, #148]	; (8001ecc <HAL_RCC_ClockConfig+0x1ec>)
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f023 0207 	bic.w	r2, r3, #7
 8001e3c:	4923      	ldr	r1, [pc, #140]	; (8001ecc <HAL_RCC_ClockConfig+0x1ec>)
 8001e3e:	683b      	ldr	r3, [r7, #0]
 8001e40:	4313      	orrs	r3, r2
 8001e42:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e44:	4b21      	ldr	r3, [pc, #132]	; (8001ecc <HAL_RCC_ClockConfig+0x1ec>)
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f003 0307 	and.w	r3, r3, #7
 8001e4c:	683a      	ldr	r2, [r7, #0]
 8001e4e:	429a      	cmp	r2, r3
 8001e50:	d001      	beq.n	8001e56 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001e52:	2301      	movs	r3, #1
 8001e54:	e036      	b.n	8001ec4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f003 0304 	and.w	r3, r3, #4
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d008      	beq.n	8001e74 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e62:	4b1b      	ldr	r3, [pc, #108]	; (8001ed0 <HAL_RCC_ClockConfig+0x1f0>)
 8001e64:	689b      	ldr	r3, [r3, #8]
 8001e66:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	68db      	ldr	r3, [r3, #12]
 8001e6e:	4918      	ldr	r1, [pc, #96]	; (8001ed0 <HAL_RCC_ClockConfig+0x1f0>)
 8001e70:	4313      	orrs	r3, r2
 8001e72:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f003 0308 	and.w	r3, r3, #8
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d009      	beq.n	8001e94 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001e80:	4b13      	ldr	r3, [pc, #76]	; (8001ed0 <HAL_RCC_ClockConfig+0x1f0>)
 8001e82:	689b      	ldr	r3, [r3, #8]
 8001e84:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	691b      	ldr	r3, [r3, #16]
 8001e8c:	00db      	lsls	r3, r3, #3
 8001e8e:	4910      	ldr	r1, [pc, #64]	; (8001ed0 <HAL_RCC_ClockConfig+0x1f0>)
 8001e90:	4313      	orrs	r3, r2
 8001e92:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001e94:	f000 f824 	bl	8001ee0 <HAL_RCC_GetSysClockFreq>
 8001e98:	4602      	mov	r2, r0
 8001e9a:	4b0d      	ldr	r3, [pc, #52]	; (8001ed0 <HAL_RCC_ClockConfig+0x1f0>)
 8001e9c:	689b      	ldr	r3, [r3, #8]
 8001e9e:	091b      	lsrs	r3, r3, #4
 8001ea0:	f003 030f 	and.w	r3, r3, #15
 8001ea4:	490b      	ldr	r1, [pc, #44]	; (8001ed4 <HAL_RCC_ClockConfig+0x1f4>)
 8001ea6:	5ccb      	ldrb	r3, [r1, r3]
 8001ea8:	f003 031f 	and.w	r3, r3, #31
 8001eac:	fa22 f303 	lsr.w	r3, r2, r3
 8001eb0:	4a09      	ldr	r2, [pc, #36]	; (8001ed8 <HAL_RCC_ClockConfig+0x1f8>)
 8001eb2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001eb4:	4b09      	ldr	r3, [pc, #36]	; (8001edc <HAL_RCC_ClockConfig+0x1fc>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	4618      	mov	r0, r3
 8001eba:	f7fe ffa9 	bl	8000e10 <HAL_InitTick>
 8001ebe:	4603      	mov	r3, r0
 8001ec0:	72fb      	strb	r3, [r7, #11]

  return status;
 8001ec2:	7afb      	ldrb	r3, [r7, #11]
}
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	3710      	adds	r7, #16
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	bd80      	pop	{r7, pc}
 8001ecc:	40022000 	.word	0x40022000
 8001ed0:	40021000 	.word	0x40021000
 8001ed4:	08002fa8 	.word	0x08002fa8
 8001ed8:	20000020 	.word	0x20000020
 8001edc:	20000024 	.word	0x20000024

08001ee0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ee0:	b480      	push	{r7}
 8001ee2:	b089      	sub	sp, #36	; 0x24
 8001ee4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	61fb      	str	r3, [r7, #28]
 8001eea:	2300      	movs	r3, #0
 8001eec:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001eee:	4b3e      	ldr	r3, [pc, #248]	; (8001fe8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001ef0:	689b      	ldr	r3, [r3, #8]
 8001ef2:	f003 030c 	and.w	r3, r3, #12
 8001ef6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001ef8:	4b3b      	ldr	r3, [pc, #236]	; (8001fe8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001efa:	68db      	ldr	r3, [r3, #12]
 8001efc:	f003 0303 	and.w	r3, r3, #3
 8001f00:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001f02:	693b      	ldr	r3, [r7, #16]
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d005      	beq.n	8001f14 <HAL_RCC_GetSysClockFreq+0x34>
 8001f08:	693b      	ldr	r3, [r7, #16]
 8001f0a:	2b0c      	cmp	r3, #12
 8001f0c:	d121      	bne.n	8001f52 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	2b01      	cmp	r3, #1
 8001f12:	d11e      	bne.n	8001f52 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001f14:	4b34      	ldr	r3, [pc, #208]	; (8001fe8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f003 0308 	and.w	r3, r3, #8
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d107      	bne.n	8001f30 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001f20:	4b31      	ldr	r3, [pc, #196]	; (8001fe8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f22:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f26:	0a1b      	lsrs	r3, r3, #8
 8001f28:	f003 030f 	and.w	r3, r3, #15
 8001f2c:	61fb      	str	r3, [r7, #28]
 8001f2e:	e005      	b.n	8001f3c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001f30:	4b2d      	ldr	r3, [pc, #180]	; (8001fe8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	091b      	lsrs	r3, r3, #4
 8001f36:	f003 030f 	and.w	r3, r3, #15
 8001f3a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001f3c:	4a2b      	ldr	r2, [pc, #172]	; (8001fec <HAL_RCC_GetSysClockFreq+0x10c>)
 8001f3e:	69fb      	ldr	r3, [r7, #28]
 8001f40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f44:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001f46:	693b      	ldr	r3, [r7, #16]
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d10d      	bne.n	8001f68 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001f4c:	69fb      	ldr	r3, [r7, #28]
 8001f4e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001f50:	e00a      	b.n	8001f68 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001f52:	693b      	ldr	r3, [r7, #16]
 8001f54:	2b04      	cmp	r3, #4
 8001f56:	d102      	bne.n	8001f5e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001f58:	4b25      	ldr	r3, [pc, #148]	; (8001ff0 <HAL_RCC_GetSysClockFreq+0x110>)
 8001f5a:	61bb      	str	r3, [r7, #24]
 8001f5c:	e004      	b.n	8001f68 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001f5e:	693b      	ldr	r3, [r7, #16]
 8001f60:	2b08      	cmp	r3, #8
 8001f62:	d101      	bne.n	8001f68 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001f64:	4b23      	ldr	r3, [pc, #140]	; (8001ff4 <HAL_RCC_GetSysClockFreq+0x114>)
 8001f66:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001f68:	693b      	ldr	r3, [r7, #16]
 8001f6a:	2b0c      	cmp	r3, #12
 8001f6c:	d134      	bne.n	8001fd8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001f6e:	4b1e      	ldr	r3, [pc, #120]	; (8001fe8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f70:	68db      	ldr	r3, [r3, #12]
 8001f72:	f003 0303 	and.w	r3, r3, #3
 8001f76:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001f78:	68bb      	ldr	r3, [r7, #8]
 8001f7a:	2b02      	cmp	r3, #2
 8001f7c:	d003      	beq.n	8001f86 <HAL_RCC_GetSysClockFreq+0xa6>
 8001f7e:	68bb      	ldr	r3, [r7, #8]
 8001f80:	2b03      	cmp	r3, #3
 8001f82:	d003      	beq.n	8001f8c <HAL_RCC_GetSysClockFreq+0xac>
 8001f84:	e005      	b.n	8001f92 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001f86:	4b1a      	ldr	r3, [pc, #104]	; (8001ff0 <HAL_RCC_GetSysClockFreq+0x110>)
 8001f88:	617b      	str	r3, [r7, #20]
      break;
 8001f8a:	e005      	b.n	8001f98 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001f8c:	4b19      	ldr	r3, [pc, #100]	; (8001ff4 <HAL_RCC_GetSysClockFreq+0x114>)
 8001f8e:	617b      	str	r3, [r7, #20]
      break;
 8001f90:	e002      	b.n	8001f98 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001f92:	69fb      	ldr	r3, [r7, #28]
 8001f94:	617b      	str	r3, [r7, #20]
      break;
 8001f96:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001f98:	4b13      	ldr	r3, [pc, #76]	; (8001fe8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f9a:	68db      	ldr	r3, [r3, #12]
 8001f9c:	091b      	lsrs	r3, r3, #4
 8001f9e:	f003 0307 	and.w	r3, r3, #7
 8001fa2:	3301      	adds	r3, #1
 8001fa4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001fa6:	4b10      	ldr	r3, [pc, #64]	; (8001fe8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001fa8:	68db      	ldr	r3, [r3, #12]
 8001faa:	0a1b      	lsrs	r3, r3, #8
 8001fac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001fb0:	697a      	ldr	r2, [r7, #20]
 8001fb2:	fb03 f202 	mul.w	r2, r3, r2
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fbc:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001fbe:	4b0a      	ldr	r3, [pc, #40]	; (8001fe8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001fc0:	68db      	ldr	r3, [r3, #12]
 8001fc2:	0e5b      	lsrs	r3, r3, #25
 8001fc4:	f003 0303 	and.w	r3, r3, #3
 8001fc8:	3301      	adds	r3, #1
 8001fca:	005b      	lsls	r3, r3, #1
 8001fcc:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001fce:	697a      	ldr	r2, [r7, #20]
 8001fd0:	683b      	ldr	r3, [r7, #0]
 8001fd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fd6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001fd8:	69bb      	ldr	r3, [r7, #24]
}
 8001fda:	4618      	mov	r0, r3
 8001fdc:	3724      	adds	r7, #36	; 0x24
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe4:	4770      	bx	lr
 8001fe6:	bf00      	nop
 8001fe8:	40021000 	.word	0x40021000
 8001fec:	08002fb8 	.word	0x08002fb8
 8001ff0:	00f42400 	.word	0x00f42400
 8001ff4:	007a1200 	.word	0x007a1200

08001ff8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b086      	sub	sp, #24
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002000:	2300      	movs	r3, #0
 8002002:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002004:	4b2a      	ldr	r3, [pc, #168]	; (80020b0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002006:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002008:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800200c:	2b00      	cmp	r3, #0
 800200e:	d003      	beq.n	8002018 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002010:	f7ff fa26 	bl	8001460 <HAL_PWREx_GetVoltageRange>
 8002014:	6178      	str	r0, [r7, #20]
 8002016:	e014      	b.n	8002042 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002018:	4b25      	ldr	r3, [pc, #148]	; (80020b0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800201a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800201c:	4a24      	ldr	r2, [pc, #144]	; (80020b0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800201e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002022:	6593      	str	r3, [r2, #88]	; 0x58
 8002024:	4b22      	ldr	r3, [pc, #136]	; (80020b0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002026:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002028:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800202c:	60fb      	str	r3, [r7, #12]
 800202e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002030:	f7ff fa16 	bl	8001460 <HAL_PWREx_GetVoltageRange>
 8002034:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002036:	4b1e      	ldr	r3, [pc, #120]	; (80020b0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002038:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800203a:	4a1d      	ldr	r2, [pc, #116]	; (80020b0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800203c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002040:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002042:	697b      	ldr	r3, [r7, #20]
 8002044:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002048:	d10b      	bne.n	8002062 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	2b80      	cmp	r3, #128	; 0x80
 800204e:	d919      	bls.n	8002084 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	2ba0      	cmp	r3, #160	; 0xa0
 8002054:	d902      	bls.n	800205c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002056:	2302      	movs	r3, #2
 8002058:	613b      	str	r3, [r7, #16]
 800205a:	e013      	b.n	8002084 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800205c:	2301      	movs	r3, #1
 800205e:	613b      	str	r3, [r7, #16]
 8002060:	e010      	b.n	8002084 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	2b80      	cmp	r3, #128	; 0x80
 8002066:	d902      	bls.n	800206e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002068:	2303      	movs	r3, #3
 800206a:	613b      	str	r3, [r7, #16]
 800206c:	e00a      	b.n	8002084 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	2b80      	cmp	r3, #128	; 0x80
 8002072:	d102      	bne.n	800207a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002074:	2302      	movs	r3, #2
 8002076:	613b      	str	r3, [r7, #16]
 8002078:	e004      	b.n	8002084 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	2b70      	cmp	r3, #112	; 0x70
 800207e:	d101      	bne.n	8002084 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002080:	2301      	movs	r3, #1
 8002082:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002084:	4b0b      	ldr	r3, [pc, #44]	; (80020b4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f023 0207 	bic.w	r2, r3, #7
 800208c:	4909      	ldr	r1, [pc, #36]	; (80020b4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800208e:	693b      	ldr	r3, [r7, #16]
 8002090:	4313      	orrs	r3, r2
 8002092:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002094:	4b07      	ldr	r3, [pc, #28]	; (80020b4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f003 0307 	and.w	r3, r3, #7
 800209c:	693a      	ldr	r2, [r7, #16]
 800209e:	429a      	cmp	r2, r3
 80020a0:	d001      	beq.n	80020a6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80020a2:	2301      	movs	r3, #1
 80020a4:	e000      	b.n	80020a8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80020a6:	2300      	movs	r3, #0
}
 80020a8:	4618      	mov	r0, r3
 80020aa:	3718      	adds	r7, #24
 80020ac:	46bd      	mov	sp, r7
 80020ae:	bd80      	pop	{r7, pc}
 80020b0:	40021000 	.word	0x40021000
 80020b4:	40022000 	.word	0x40022000

080020b8 <memset>:
 80020b8:	4402      	add	r2, r0
 80020ba:	4603      	mov	r3, r0
 80020bc:	4293      	cmp	r3, r2
 80020be:	d100      	bne.n	80020c2 <memset+0xa>
 80020c0:	4770      	bx	lr
 80020c2:	f803 1b01 	strb.w	r1, [r3], #1
 80020c6:	e7f9      	b.n	80020bc <memset+0x4>

080020c8 <__errno>:
 80020c8:	4b01      	ldr	r3, [pc, #4]	; (80020d0 <__errno+0x8>)
 80020ca:	6818      	ldr	r0, [r3, #0]
 80020cc:	4770      	bx	lr
 80020ce:	bf00      	nop
 80020d0:	20000078 	.word	0x20000078

080020d4 <__libc_init_array>:
 80020d4:	b570      	push	{r4, r5, r6, lr}
 80020d6:	4d0d      	ldr	r5, [pc, #52]	; (800210c <__libc_init_array+0x38>)
 80020d8:	4c0d      	ldr	r4, [pc, #52]	; (8002110 <__libc_init_array+0x3c>)
 80020da:	1b64      	subs	r4, r4, r5
 80020dc:	10a4      	asrs	r4, r4, #2
 80020de:	2600      	movs	r6, #0
 80020e0:	42a6      	cmp	r6, r4
 80020e2:	d109      	bne.n	80020f8 <__libc_init_array+0x24>
 80020e4:	4d0b      	ldr	r5, [pc, #44]	; (8002114 <__libc_init_array+0x40>)
 80020e6:	4c0c      	ldr	r4, [pc, #48]	; (8002118 <__libc_init_array+0x44>)
 80020e8:	f000 ff52 	bl	8002f90 <_init>
 80020ec:	1b64      	subs	r4, r4, r5
 80020ee:	10a4      	asrs	r4, r4, #2
 80020f0:	2600      	movs	r6, #0
 80020f2:	42a6      	cmp	r6, r4
 80020f4:	d105      	bne.n	8002102 <__libc_init_array+0x2e>
 80020f6:	bd70      	pop	{r4, r5, r6, pc}
 80020f8:	f855 3b04 	ldr.w	r3, [r5], #4
 80020fc:	4798      	blx	r3
 80020fe:	3601      	adds	r6, #1
 8002100:	e7ee      	b.n	80020e0 <__libc_init_array+0xc>
 8002102:	f855 3b04 	ldr.w	r3, [r5], #4
 8002106:	4798      	blx	r3
 8002108:	3601      	adds	r6, #1
 800210a:	e7f2      	b.n	80020f2 <__libc_init_array+0x1e>
 800210c:	08003018 	.word	0x08003018
 8002110:	08003018 	.word	0x08003018
 8002114:	08003018 	.word	0x08003018
 8002118:	0800301c 	.word	0x0800301c

0800211c <pow>:
 800211c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800211e:	ed2d 8b02 	vpush	{d8}
 8002122:	eeb0 8a40 	vmov.f32	s16, s0
 8002126:	eef0 8a60 	vmov.f32	s17, s1
 800212a:	ec55 4b11 	vmov	r4, r5, d1
 800212e:	f000 f873 	bl	8002218 <__ieee754_pow>
 8002132:	4622      	mov	r2, r4
 8002134:	462b      	mov	r3, r5
 8002136:	4620      	mov	r0, r4
 8002138:	4629      	mov	r1, r5
 800213a:	ec57 6b10 	vmov	r6, r7, d0
 800213e:	f7fe fc99 	bl	8000a74 <__aeabi_dcmpun>
 8002142:	2800      	cmp	r0, #0
 8002144:	d13b      	bne.n	80021be <pow+0xa2>
 8002146:	ec51 0b18 	vmov	r0, r1, d8
 800214a:	2200      	movs	r2, #0
 800214c:	2300      	movs	r3, #0
 800214e:	f7fe fc5f 	bl	8000a10 <__aeabi_dcmpeq>
 8002152:	b1b8      	cbz	r0, 8002184 <pow+0x68>
 8002154:	2200      	movs	r2, #0
 8002156:	2300      	movs	r3, #0
 8002158:	4620      	mov	r0, r4
 800215a:	4629      	mov	r1, r5
 800215c:	f7fe fc58 	bl	8000a10 <__aeabi_dcmpeq>
 8002160:	2800      	cmp	r0, #0
 8002162:	d146      	bne.n	80021f2 <pow+0xd6>
 8002164:	ec45 4b10 	vmov	d0, r4, r5
 8002168:	f000 f848 	bl	80021fc <finite>
 800216c:	b338      	cbz	r0, 80021be <pow+0xa2>
 800216e:	2200      	movs	r2, #0
 8002170:	2300      	movs	r3, #0
 8002172:	4620      	mov	r0, r4
 8002174:	4629      	mov	r1, r5
 8002176:	f7fe fc55 	bl	8000a24 <__aeabi_dcmplt>
 800217a:	b300      	cbz	r0, 80021be <pow+0xa2>
 800217c:	f7ff ffa4 	bl	80020c8 <__errno>
 8002180:	2322      	movs	r3, #34	; 0x22
 8002182:	e01b      	b.n	80021bc <pow+0xa0>
 8002184:	ec47 6b10 	vmov	d0, r6, r7
 8002188:	f000 f838 	bl	80021fc <finite>
 800218c:	b9e0      	cbnz	r0, 80021c8 <pow+0xac>
 800218e:	eeb0 0a48 	vmov.f32	s0, s16
 8002192:	eef0 0a68 	vmov.f32	s1, s17
 8002196:	f000 f831 	bl	80021fc <finite>
 800219a:	b1a8      	cbz	r0, 80021c8 <pow+0xac>
 800219c:	ec45 4b10 	vmov	d0, r4, r5
 80021a0:	f000 f82c 	bl	80021fc <finite>
 80021a4:	b180      	cbz	r0, 80021c8 <pow+0xac>
 80021a6:	4632      	mov	r2, r6
 80021a8:	463b      	mov	r3, r7
 80021aa:	4630      	mov	r0, r6
 80021ac:	4639      	mov	r1, r7
 80021ae:	f7fe fc61 	bl	8000a74 <__aeabi_dcmpun>
 80021b2:	2800      	cmp	r0, #0
 80021b4:	d0e2      	beq.n	800217c <pow+0x60>
 80021b6:	f7ff ff87 	bl	80020c8 <__errno>
 80021ba:	2321      	movs	r3, #33	; 0x21
 80021bc:	6003      	str	r3, [r0, #0]
 80021be:	ecbd 8b02 	vpop	{d8}
 80021c2:	ec47 6b10 	vmov	d0, r6, r7
 80021c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80021c8:	2200      	movs	r2, #0
 80021ca:	2300      	movs	r3, #0
 80021cc:	4630      	mov	r0, r6
 80021ce:	4639      	mov	r1, r7
 80021d0:	f7fe fc1e 	bl	8000a10 <__aeabi_dcmpeq>
 80021d4:	2800      	cmp	r0, #0
 80021d6:	d0f2      	beq.n	80021be <pow+0xa2>
 80021d8:	eeb0 0a48 	vmov.f32	s0, s16
 80021dc:	eef0 0a68 	vmov.f32	s1, s17
 80021e0:	f000 f80c 	bl	80021fc <finite>
 80021e4:	2800      	cmp	r0, #0
 80021e6:	d0ea      	beq.n	80021be <pow+0xa2>
 80021e8:	ec45 4b10 	vmov	d0, r4, r5
 80021ec:	f000 f806 	bl	80021fc <finite>
 80021f0:	e7c3      	b.n	800217a <pow+0x5e>
 80021f2:	4f01      	ldr	r7, [pc, #4]	; (80021f8 <pow+0xdc>)
 80021f4:	2600      	movs	r6, #0
 80021f6:	e7e2      	b.n	80021be <pow+0xa2>
 80021f8:	3ff00000 	.word	0x3ff00000

080021fc <finite>:
 80021fc:	b082      	sub	sp, #8
 80021fe:	ed8d 0b00 	vstr	d0, [sp]
 8002202:	9801      	ldr	r0, [sp, #4]
 8002204:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8002208:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800220c:	0fc0      	lsrs	r0, r0, #31
 800220e:	b002      	add	sp, #8
 8002210:	4770      	bx	lr
 8002212:	0000      	movs	r0, r0
 8002214:	0000      	movs	r0, r0
	...

08002218 <__ieee754_pow>:
 8002218:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800221c:	ed2d 8b06 	vpush	{d8-d10}
 8002220:	b089      	sub	sp, #36	; 0x24
 8002222:	ed8d 1b00 	vstr	d1, [sp]
 8002226:	e9dd 2900 	ldrd	r2, r9, [sp]
 800222a:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 800222e:	ea58 0102 	orrs.w	r1, r8, r2
 8002232:	ec57 6b10 	vmov	r6, r7, d0
 8002236:	d115      	bne.n	8002264 <__ieee754_pow+0x4c>
 8002238:	19b3      	adds	r3, r6, r6
 800223a:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 800223e:	4152      	adcs	r2, r2
 8002240:	4299      	cmp	r1, r3
 8002242:	4b89      	ldr	r3, [pc, #548]	; (8002468 <__ieee754_pow+0x250>)
 8002244:	4193      	sbcs	r3, r2
 8002246:	f080 84d1 	bcs.w	8002bec <__ieee754_pow+0x9d4>
 800224a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800224e:	4630      	mov	r0, r6
 8002250:	4639      	mov	r1, r7
 8002252:	f7fd ffbf 	bl	80001d4 <__adddf3>
 8002256:	ec41 0b10 	vmov	d0, r0, r1
 800225a:	b009      	add	sp, #36	; 0x24
 800225c:	ecbd 8b06 	vpop	{d8-d10}
 8002260:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002264:	4b81      	ldr	r3, [pc, #516]	; (800246c <__ieee754_pow+0x254>)
 8002266:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 800226a:	429c      	cmp	r4, r3
 800226c:	ee10 aa10 	vmov	sl, s0
 8002270:	463d      	mov	r5, r7
 8002272:	dc06      	bgt.n	8002282 <__ieee754_pow+0x6a>
 8002274:	d101      	bne.n	800227a <__ieee754_pow+0x62>
 8002276:	2e00      	cmp	r6, #0
 8002278:	d1e7      	bne.n	800224a <__ieee754_pow+0x32>
 800227a:	4598      	cmp	r8, r3
 800227c:	dc01      	bgt.n	8002282 <__ieee754_pow+0x6a>
 800227e:	d10f      	bne.n	80022a0 <__ieee754_pow+0x88>
 8002280:	b172      	cbz	r2, 80022a0 <__ieee754_pow+0x88>
 8002282:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 8002286:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 800228a:	ea55 050a 	orrs.w	r5, r5, sl
 800228e:	d1dc      	bne.n	800224a <__ieee754_pow+0x32>
 8002290:	e9dd 3200 	ldrd	r3, r2, [sp]
 8002294:	18db      	adds	r3, r3, r3
 8002296:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 800229a:	4152      	adcs	r2, r2
 800229c:	429d      	cmp	r5, r3
 800229e:	e7d0      	b.n	8002242 <__ieee754_pow+0x2a>
 80022a0:	2d00      	cmp	r5, #0
 80022a2:	da3b      	bge.n	800231c <__ieee754_pow+0x104>
 80022a4:	4b72      	ldr	r3, [pc, #456]	; (8002470 <__ieee754_pow+0x258>)
 80022a6:	4598      	cmp	r8, r3
 80022a8:	dc51      	bgt.n	800234e <__ieee754_pow+0x136>
 80022aa:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 80022ae:	4598      	cmp	r8, r3
 80022b0:	f340 84ab 	ble.w	8002c0a <__ieee754_pow+0x9f2>
 80022b4:	ea4f 5328 	mov.w	r3, r8, asr #20
 80022b8:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80022bc:	2b14      	cmp	r3, #20
 80022be:	dd0f      	ble.n	80022e0 <__ieee754_pow+0xc8>
 80022c0:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 80022c4:	fa22 f103 	lsr.w	r1, r2, r3
 80022c8:	fa01 f303 	lsl.w	r3, r1, r3
 80022cc:	4293      	cmp	r3, r2
 80022ce:	f040 849c 	bne.w	8002c0a <__ieee754_pow+0x9f2>
 80022d2:	f001 0101 	and.w	r1, r1, #1
 80022d6:	f1c1 0302 	rsb	r3, r1, #2
 80022da:	9304      	str	r3, [sp, #16]
 80022dc:	b182      	cbz	r2, 8002300 <__ieee754_pow+0xe8>
 80022de:	e05f      	b.n	80023a0 <__ieee754_pow+0x188>
 80022e0:	2a00      	cmp	r2, #0
 80022e2:	d15b      	bne.n	800239c <__ieee754_pow+0x184>
 80022e4:	f1c3 0314 	rsb	r3, r3, #20
 80022e8:	fa48 f103 	asr.w	r1, r8, r3
 80022ec:	fa01 f303 	lsl.w	r3, r1, r3
 80022f0:	4543      	cmp	r3, r8
 80022f2:	f040 8487 	bne.w	8002c04 <__ieee754_pow+0x9ec>
 80022f6:	f001 0101 	and.w	r1, r1, #1
 80022fa:	f1c1 0302 	rsb	r3, r1, #2
 80022fe:	9304      	str	r3, [sp, #16]
 8002300:	4b5c      	ldr	r3, [pc, #368]	; (8002474 <__ieee754_pow+0x25c>)
 8002302:	4598      	cmp	r8, r3
 8002304:	d132      	bne.n	800236c <__ieee754_pow+0x154>
 8002306:	f1b9 0f00 	cmp.w	r9, #0
 800230a:	f280 8477 	bge.w	8002bfc <__ieee754_pow+0x9e4>
 800230e:	4959      	ldr	r1, [pc, #356]	; (8002474 <__ieee754_pow+0x25c>)
 8002310:	4632      	mov	r2, r6
 8002312:	463b      	mov	r3, r7
 8002314:	2000      	movs	r0, #0
 8002316:	f7fe fa3d 	bl	8000794 <__aeabi_ddiv>
 800231a:	e79c      	b.n	8002256 <__ieee754_pow+0x3e>
 800231c:	2300      	movs	r3, #0
 800231e:	9304      	str	r3, [sp, #16]
 8002320:	2a00      	cmp	r2, #0
 8002322:	d13d      	bne.n	80023a0 <__ieee754_pow+0x188>
 8002324:	4b51      	ldr	r3, [pc, #324]	; (800246c <__ieee754_pow+0x254>)
 8002326:	4598      	cmp	r8, r3
 8002328:	d1ea      	bne.n	8002300 <__ieee754_pow+0xe8>
 800232a:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800232e:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8002332:	ea53 030a 	orrs.w	r3, r3, sl
 8002336:	f000 8459 	beq.w	8002bec <__ieee754_pow+0x9d4>
 800233a:	4b4f      	ldr	r3, [pc, #316]	; (8002478 <__ieee754_pow+0x260>)
 800233c:	429c      	cmp	r4, r3
 800233e:	dd08      	ble.n	8002352 <__ieee754_pow+0x13a>
 8002340:	f1b9 0f00 	cmp.w	r9, #0
 8002344:	f2c0 8456 	blt.w	8002bf4 <__ieee754_pow+0x9dc>
 8002348:	e9dd 0100 	ldrd	r0, r1, [sp]
 800234c:	e783      	b.n	8002256 <__ieee754_pow+0x3e>
 800234e:	2302      	movs	r3, #2
 8002350:	e7e5      	b.n	800231e <__ieee754_pow+0x106>
 8002352:	f1b9 0f00 	cmp.w	r9, #0
 8002356:	f04f 0000 	mov.w	r0, #0
 800235a:	f04f 0100 	mov.w	r1, #0
 800235e:	f6bf af7a 	bge.w	8002256 <__ieee754_pow+0x3e>
 8002362:	e9dd 0300 	ldrd	r0, r3, [sp]
 8002366:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800236a:	e774      	b.n	8002256 <__ieee754_pow+0x3e>
 800236c:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8002370:	d106      	bne.n	8002380 <__ieee754_pow+0x168>
 8002372:	4632      	mov	r2, r6
 8002374:	463b      	mov	r3, r7
 8002376:	4630      	mov	r0, r6
 8002378:	4639      	mov	r1, r7
 800237a:	f7fe f8e1 	bl	8000540 <__aeabi_dmul>
 800237e:	e76a      	b.n	8002256 <__ieee754_pow+0x3e>
 8002380:	4b3e      	ldr	r3, [pc, #248]	; (800247c <__ieee754_pow+0x264>)
 8002382:	4599      	cmp	r9, r3
 8002384:	d10c      	bne.n	80023a0 <__ieee754_pow+0x188>
 8002386:	2d00      	cmp	r5, #0
 8002388:	db0a      	blt.n	80023a0 <__ieee754_pow+0x188>
 800238a:	ec47 6b10 	vmov	d0, r6, r7
 800238e:	b009      	add	sp, #36	; 0x24
 8002390:	ecbd 8b06 	vpop	{d8-d10}
 8002394:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002398:	f000 bd20 	b.w	8002ddc <__ieee754_sqrt>
 800239c:	2300      	movs	r3, #0
 800239e:	9304      	str	r3, [sp, #16]
 80023a0:	ec47 6b10 	vmov	d0, r6, r7
 80023a4:	f000 fc62 	bl	8002c6c <fabs>
 80023a8:	ec51 0b10 	vmov	r0, r1, d0
 80023ac:	f1ba 0f00 	cmp.w	sl, #0
 80023b0:	d129      	bne.n	8002406 <__ieee754_pow+0x1ee>
 80023b2:	b124      	cbz	r4, 80023be <__ieee754_pow+0x1a6>
 80023b4:	4b2f      	ldr	r3, [pc, #188]	; (8002474 <__ieee754_pow+0x25c>)
 80023b6:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 80023ba:	429a      	cmp	r2, r3
 80023bc:	d123      	bne.n	8002406 <__ieee754_pow+0x1ee>
 80023be:	f1b9 0f00 	cmp.w	r9, #0
 80023c2:	da05      	bge.n	80023d0 <__ieee754_pow+0x1b8>
 80023c4:	4602      	mov	r2, r0
 80023c6:	460b      	mov	r3, r1
 80023c8:	2000      	movs	r0, #0
 80023ca:	492a      	ldr	r1, [pc, #168]	; (8002474 <__ieee754_pow+0x25c>)
 80023cc:	f7fe f9e2 	bl	8000794 <__aeabi_ddiv>
 80023d0:	2d00      	cmp	r5, #0
 80023d2:	f6bf af40 	bge.w	8002256 <__ieee754_pow+0x3e>
 80023d6:	9b04      	ldr	r3, [sp, #16]
 80023d8:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80023dc:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80023e0:	431c      	orrs	r4, r3
 80023e2:	d108      	bne.n	80023f6 <__ieee754_pow+0x1de>
 80023e4:	4602      	mov	r2, r0
 80023e6:	460b      	mov	r3, r1
 80023e8:	4610      	mov	r0, r2
 80023ea:	4619      	mov	r1, r3
 80023ec:	f7fd fef0 	bl	80001d0 <__aeabi_dsub>
 80023f0:	4602      	mov	r2, r0
 80023f2:	460b      	mov	r3, r1
 80023f4:	e78f      	b.n	8002316 <__ieee754_pow+0xfe>
 80023f6:	9b04      	ldr	r3, [sp, #16]
 80023f8:	2b01      	cmp	r3, #1
 80023fa:	f47f af2c 	bne.w	8002256 <__ieee754_pow+0x3e>
 80023fe:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8002402:	4619      	mov	r1, r3
 8002404:	e727      	b.n	8002256 <__ieee754_pow+0x3e>
 8002406:	0feb      	lsrs	r3, r5, #31
 8002408:	3b01      	subs	r3, #1
 800240a:	9306      	str	r3, [sp, #24]
 800240c:	9a06      	ldr	r2, [sp, #24]
 800240e:	9b04      	ldr	r3, [sp, #16]
 8002410:	4313      	orrs	r3, r2
 8002412:	d102      	bne.n	800241a <__ieee754_pow+0x202>
 8002414:	4632      	mov	r2, r6
 8002416:	463b      	mov	r3, r7
 8002418:	e7e6      	b.n	80023e8 <__ieee754_pow+0x1d0>
 800241a:	4b19      	ldr	r3, [pc, #100]	; (8002480 <__ieee754_pow+0x268>)
 800241c:	4598      	cmp	r8, r3
 800241e:	f340 80fb 	ble.w	8002618 <__ieee754_pow+0x400>
 8002422:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8002426:	4598      	cmp	r8, r3
 8002428:	4b13      	ldr	r3, [pc, #76]	; (8002478 <__ieee754_pow+0x260>)
 800242a:	dd0c      	ble.n	8002446 <__ieee754_pow+0x22e>
 800242c:	429c      	cmp	r4, r3
 800242e:	dc0f      	bgt.n	8002450 <__ieee754_pow+0x238>
 8002430:	f1b9 0f00 	cmp.w	r9, #0
 8002434:	da0f      	bge.n	8002456 <__ieee754_pow+0x23e>
 8002436:	2000      	movs	r0, #0
 8002438:	b009      	add	sp, #36	; 0x24
 800243a:	ecbd 8b06 	vpop	{d8-d10}
 800243e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002442:	f000 bcc2 	b.w	8002dca <__math_oflow>
 8002446:	429c      	cmp	r4, r3
 8002448:	dbf2      	blt.n	8002430 <__ieee754_pow+0x218>
 800244a:	4b0a      	ldr	r3, [pc, #40]	; (8002474 <__ieee754_pow+0x25c>)
 800244c:	429c      	cmp	r4, r3
 800244e:	dd19      	ble.n	8002484 <__ieee754_pow+0x26c>
 8002450:	f1b9 0f00 	cmp.w	r9, #0
 8002454:	dcef      	bgt.n	8002436 <__ieee754_pow+0x21e>
 8002456:	2000      	movs	r0, #0
 8002458:	b009      	add	sp, #36	; 0x24
 800245a:	ecbd 8b06 	vpop	{d8-d10}
 800245e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002462:	f000 bca9 	b.w	8002db8 <__math_uflow>
 8002466:	bf00      	nop
 8002468:	fff00000 	.word	0xfff00000
 800246c:	7ff00000 	.word	0x7ff00000
 8002470:	433fffff 	.word	0x433fffff
 8002474:	3ff00000 	.word	0x3ff00000
 8002478:	3fefffff 	.word	0x3fefffff
 800247c:	3fe00000 	.word	0x3fe00000
 8002480:	41e00000 	.word	0x41e00000
 8002484:	4b60      	ldr	r3, [pc, #384]	; (8002608 <__ieee754_pow+0x3f0>)
 8002486:	2200      	movs	r2, #0
 8002488:	f7fd fea2 	bl	80001d0 <__aeabi_dsub>
 800248c:	a354      	add	r3, pc, #336	; (adr r3, 80025e0 <__ieee754_pow+0x3c8>)
 800248e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002492:	4604      	mov	r4, r0
 8002494:	460d      	mov	r5, r1
 8002496:	f7fe f853 	bl	8000540 <__aeabi_dmul>
 800249a:	a353      	add	r3, pc, #332	; (adr r3, 80025e8 <__ieee754_pow+0x3d0>)
 800249c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024a0:	4606      	mov	r6, r0
 80024a2:	460f      	mov	r7, r1
 80024a4:	4620      	mov	r0, r4
 80024a6:	4629      	mov	r1, r5
 80024a8:	f7fe f84a 	bl	8000540 <__aeabi_dmul>
 80024ac:	4b57      	ldr	r3, [pc, #348]	; (800260c <__ieee754_pow+0x3f4>)
 80024ae:	4682      	mov	sl, r0
 80024b0:	468b      	mov	fp, r1
 80024b2:	2200      	movs	r2, #0
 80024b4:	4620      	mov	r0, r4
 80024b6:	4629      	mov	r1, r5
 80024b8:	f7fe f842 	bl	8000540 <__aeabi_dmul>
 80024bc:	4602      	mov	r2, r0
 80024be:	460b      	mov	r3, r1
 80024c0:	a14b      	add	r1, pc, #300	; (adr r1, 80025f0 <__ieee754_pow+0x3d8>)
 80024c2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80024c6:	f7fd fe83 	bl	80001d0 <__aeabi_dsub>
 80024ca:	4622      	mov	r2, r4
 80024cc:	462b      	mov	r3, r5
 80024ce:	f7fe f837 	bl	8000540 <__aeabi_dmul>
 80024d2:	4602      	mov	r2, r0
 80024d4:	460b      	mov	r3, r1
 80024d6:	2000      	movs	r0, #0
 80024d8:	494d      	ldr	r1, [pc, #308]	; (8002610 <__ieee754_pow+0x3f8>)
 80024da:	f7fd fe79 	bl	80001d0 <__aeabi_dsub>
 80024de:	4622      	mov	r2, r4
 80024e0:	4680      	mov	r8, r0
 80024e2:	4689      	mov	r9, r1
 80024e4:	462b      	mov	r3, r5
 80024e6:	4620      	mov	r0, r4
 80024e8:	4629      	mov	r1, r5
 80024ea:	f7fe f829 	bl	8000540 <__aeabi_dmul>
 80024ee:	4602      	mov	r2, r0
 80024f0:	460b      	mov	r3, r1
 80024f2:	4640      	mov	r0, r8
 80024f4:	4649      	mov	r1, r9
 80024f6:	f7fe f823 	bl	8000540 <__aeabi_dmul>
 80024fa:	a33f      	add	r3, pc, #252	; (adr r3, 80025f8 <__ieee754_pow+0x3e0>)
 80024fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002500:	f7fe f81e 	bl	8000540 <__aeabi_dmul>
 8002504:	4602      	mov	r2, r0
 8002506:	460b      	mov	r3, r1
 8002508:	4650      	mov	r0, sl
 800250a:	4659      	mov	r1, fp
 800250c:	f7fd fe60 	bl	80001d0 <__aeabi_dsub>
 8002510:	4602      	mov	r2, r0
 8002512:	460b      	mov	r3, r1
 8002514:	4680      	mov	r8, r0
 8002516:	4689      	mov	r9, r1
 8002518:	4630      	mov	r0, r6
 800251a:	4639      	mov	r1, r7
 800251c:	f7fd fe5a 	bl	80001d4 <__adddf3>
 8002520:	2000      	movs	r0, #0
 8002522:	4632      	mov	r2, r6
 8002524:	463b      	mov	r3, r7
 8002526:	4604      	mov	r4, r0
 8002528:	460d      	mov	r5, r1
 800252a:	f7fd fe51 	bl	80001d0 <__aeabi_dsub>
 800252e:	4602      	mov	r2, r0
 8002530:	460b      	mov	r3, r1
 8002532:	4640      	mov	r0, r8
 8002534:	4649      	mov	r1, r9
 8002536:	f7fd fe4b 	bl	80001d0 <__aeabi_dsub>
 800253a:	9b04      	ldr	r3, [sp, #16]
 800253c:	9a06      	ldr	r2, [sp, #24]
 800253e:	3b01      	subs	r3, #1
 8002540:	4313      	orrs	r3, r2
 8002542:	4682      	mov	sl, r0
 8002544:	468b      	mov	fp, r1
 8002546:	f040 81e7 	bne.w	8002918 <__ieee754_pow+0x700>
 800254a:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 8002600 <__ieee754_pow+0x3e8>
 800254e:	eeb0 8a47 	vmov.f32	s16, s14
 8002552:	eef0 8a67 	vmov.f32	s17, s15
 8002556:	e9dd 6700 	ldrd	r6, r7, [sp]
 800255a:	2600      	movs	r6, #0
 800255c:	4632      	mov	r2, r6
 800255e:	463b      	mov	r3, r7
 8002560:	e9dd 0100 	ldrd	r0, r1, [sp]
 8002564:	f7fd fe34 	bl	80001d0 <__aeabi_dsub>
 8002568:	4622      	mov	r2, r4
 800256a:	462b      	mov	r3, r5
 800256c:	f7fd ffe8 	bl	8000540 <__aeabi_dmul>
 8002570:	e9dd 2300 	ldrd	r2, r3, [sp]
 8002574:	4680      	mov	r8, r0
 8002576:	4689      	mov	r9, r1
 8002578:	4650      	mov	r0, sl
 800257a:	4659      	mov	r1, fp
 800257c:	f7fd ffe0 	bl	8000540 <__aeabi_dmul>
 8002580:	4602      	mov	r2, r0
 8002582:	460b      	mov	r3, r1
 8002584:	4640      	mov	r0, r8
 8002586:	4649      	mov	r1, r9
 8002588:	f7fd fe24 	bl	80001d4 <__adddf3>
 800258c:	4632      	mov	r2, r6
 800258e:	463b      	mov	r3, r7
 8002590:	4680      	mov	r8, r0
 8002592:	4689      	mov	r9, r1
 8002594:	4620      	mov	r0, r4
 8002596:	4629      	mov	r1, r5
 8002598:	f7fd ffd2 	bl	8000540 <__aeabi_dmul>
 800259c:	460b      	mov	r3, r1
 800259e:	4604      	mov	r4, r0
 80025a0:	460d      	mov	r5, r1
 80025a2:	4602      	mov	r2, r0
 80025a4:	4649      	mov	r1, r9
 80025a6:	4640      	mov	r0, r8
 80025a8:	f7fd fe14 	bl	80001d4 <__adddf3>
 80025ac:	4b19      	ldr	r3, [pc, #100]	; (8002614 <__ieee754_pow+0x3fc>)
 80025ae:	4299      	cmp	r1, r3
 80025b0:	ec45 4b19 	vmov	d9, r4, r5
 80025b4:	4606      	mov	r6, r0
 80025b6:	460f      	mov	r7, r1
 80025b8:	468b      	mov	fp, r1
 80025ba:	f340 82f0 	ble.w	8002b9e <__ieee754_pow+0x986>
 80025be:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 80025c2:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 80025c6:	4303      	orrs	r3, r0
 80025c8:	f000 81e4 	beq.w	8002994 <__ieee754_pow+0x77c>
 80025cc:	ec51 0b18 	vmov	r0, r1, d8
 80025d0:	2200      	movs	r2, #0
 80025d2:	2300      	movs	r3, #0
 80025d4:	f7fe fa26 	bl	8000a24 <__aeabi_dcmplt>
 80025d8:	3800      	subs	r0, #0
 80025da:	bf18      	it	ne
 80025dc:	2001      	movne	r0, #1
 80025de:	e72b      	b.n	8002438 <__ieee754_pow+0x220>
 80025e0:	60000000 	.word	0x60000000
 80025e4:	3ff71547 	.word	0x3ff71547
 80025e8:	f85ddf44 	.word	0xf85ddf44
 80025ec:	3e54ae0b 	.word	0x3e54ae0b
 80025f0:	55555555 	.word	0x55555555
 80025f4:	3fd55555 	.word	0x3fd55555
 80025f8:	652b82fe 	.word	0x652b82fe
 80025fc:	3ff71547 	.word	0x3ff71547
 8002600:	00000000 	.word	0x00000000
 8002604:	bff00000 	.word	0xbff00000
 8002608:	3ff00000 	.word	0x3ff00000
 800260c:	3fd00000 	.word	0x3fd00000
 8002610:	3fe00000 	.word	0x3fe00000
 8002614:	408fffff 	.word	0x408fffff
 8002618:	4bd5      	ldr	r3, [pc, #852]	; (8002970 <__ieee754_pow+0x758>)
 800261a:	402b      	ands	r3, r5
 800261c:	2200      	movs	r2, #0
 800261e:	b92b      	cbnz	r3, 800262c <__ieee754_pow+0x414>
 8002620:	4bd4      	ldr	r3, [pc, #848]	; (8002974 <__ieee754_pow+0x75c>)
 8002622:	f7fd ff8d 	bl	8000540 <__aeabi_dmul>
 8002626:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800262a:	460c      	mov	r4, r1
 800262c:	1523      	asrs	r3, r4, #20
 800262e:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8002632:	4413      	add	r3, r2
 8002634:	9305      	str	r3, [sp, #20]
 8002636:	4bd0      	ldr	r3, [pc, #832]	; (8002978 <__ieee754_pow+0x760>)
 8002638:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800263c:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8002640:	429c      	cmp	r4, r3
 8002642:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8002646:	dd08      	ble.n	800265a <__ieee754_pow+0x442>
 8002648:	4bcc      	ldr	r3, [pc, #816]	; (800297c <__ieee754_pow+0x764>)
 800264a:	429c      	cmp	r4, r3
 800264c:	f340 8162 	ble.w	8002914 <__ieee754_pow+0x6fc>
 8002650:	9b05      	ldr	r3, [sp, #20]
 8002652:	3301      	adds	r3, #1
 8002654:	9305      	str	r3, [sp, #20]
 8002656:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800265a:	2400      	movs	r4, #0
 800265c:	00e3      	lsls	r3, r4, #3
 800265e:	9307      	str	r3, [sp, #28]
 8002660:	4bc7      	ldr	r3, [pc, #796]	; (8002980 <__ieee754_pow+0x768>)
 8002662:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8002666:	ed93 7b00 	vldr	d7, [r3]
 800266a:	4629      	mov	r1, r5
 800266c:	ec53 2b17 	vmov	r2, r3, d7
 8002670:	eeb0 9a47 	vmov.f32	s18, s14
 8002674:	eef0 9a67 	vmov.f32	s19, s15
 8002678:	4682      	mov	sl, r0
 800267a:	f7fd fda9 	bl	80001d0 <__aeabi_dsub>
 800267e:	4652      	mov	r2, sl
 8002680:	4606      	mov	r6, r0
 8002682:	460f      	mov	r7, r1
 8002684:	462b      	mov	r3, r5
 8002686:	ec51 0b19 	vmov	r0, r1, d9
 800268a:	f7fd fda3 	bl	80001d4 <__adddf3>
 800268e:	4602      	mov	r2, r0
 8002690:	460b      	mov	r3, r1
 8002692:	2000      	movs	r0, #0
 8002694:	49bb      	ldr	r1, [pc, #748]	; (8002984 <__ieee754_pow+0x76c>)
 8002696:	f7fe f87d 	bl	8000794 <__aeabi_ddiv>
 800269a:	ec41 0b1a 	vmov	d10, r0, r1
 800269e:	4602      	mov	r2, r0
 80026a0:	460b      	mov	r3, r1
 80026a2:	4630      	mov	r0, r6
 80026a4:	4639      	mov	r1, r7
 80026a6:	f7fd ff4b 	bl	8000540 <__aeabi_dmul>
 80026aa:	2300      	movs	r3, #0
 80026ac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80026b0:	9302      	str	r3, [sp, #8]
 80026b2:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80026b6:	46ab      	mov	fp, r5
 80026b8:	106d      	asrs	r5, r5, #1
 80026ba:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 80026be:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 80026c2:	ec41 0b18 	vmov	d8, r0, r1
 80026c6:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 80026ca:	2200      	movs	r2, #0
 80026cc:	4640      	mov	r0, r8
 80026ce:	4649      	mov	r1, r9
 80026d0:	4614      	mov	r4, r2
 80026d2:	461d      	mov	r5, r3
 80026d4:	f7fd ff34 	bl	8000540 <__aeabi_dmul>
 80026d8:	4602      	mov	r2, r0
 80026da:	460b      	mov	r3, r1
 80026dc:	4630      	mov	r0, r6
 80026de:	4639      	mov	r1, r7
 80026e0:	f7fd fd76 	bl	80001d0 <__aeabi_dsub>
 80026e4:	ec53 2b19 	vmov	r2, r3, d9
 80026e8:	4606      	mov	r6, r0
 80026ea:	460f      	mov	r7, r1
 80026ec:	4620      	mov	r0, r4
 80026ee:	4629      	mov	r1, r5
 80026f0:	f7fd fd6e 	bl	80001d0 <__aeabi_dsub>
 80026f4:	4602      	mov	r2, r0
 80026f6:	460b      	mov	r3, r1
 80026f8:	4650      	mov	r0, sl
 80026fa:	4659      	mov	r1, fp
 80026fc:	f7fd fd68 	bl	80001d0 <__aeabi_dsub>
 8002700:	4642      	mov	r2, r8
 8002702:	464b      	mov	r3, r9
 8002704:	f7fd ff1c 	bl	8000540 <__aeabi_dmul>
 8002708:	4602      	mov	r2, r0
 800270a:	460b      	mov	r3, r1
 800270c:	4630      	mov	r0, r6
 800270e:	4639      	mov	r1, r7
 8002710:	f7fd fd5e 	bl	80001d0 <__aeabi_dsub>
 8002714:	ec53 2b1a 	vmov	r2, r3, d10
 8002718:	f7fd ff12 	bl	8000540 <__aeabi_dmul>
 800271c:	ec53 2b18 	vmov	r2, r3, d8
 8002720:	ec41 0b19 	vmov	d9, r0, r1
 8002724:	ec51 0b18 	vmov	r0, r1, d8
 8002728:	f7fd ff0a 	bl	8000540 <__aeabi_dmul>
 800272c:	a37c      	add	r3, pc, #496	; (adr r3, 8002920 <__ieee754_pow+0x708>)
 800272e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002732:	4604      	mov	r4, r0
 8002734:	460d      	mov	r5, r1
 8002736:	f7fd ff03 	bl	8000540 <__aeabi_dmul>
 800273a:	a37b      	add	r3, pc, #492	; (adr r3, 8002928 <__ieee754_pow+0x710>)
 800273c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002740:	f7fd fd48 	bl	80001d4 <__adddf3>
 8002744:	4622      	mov	r2, r4
 8002746:	462b      	mov	r3, r5
 8002748:	f7fd fefa 	bl	8000540 <__aeabi_dmul>
 800274c:	a378      	add	r3, pc, #480	; (adr r3, 8002930 <__ieee754_pow+0x718>)
 800274e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002752:	f7fd fd3f 	bl	80001d4 <__adddf3>
 8002756:	4622      	mov	r2, r4
 8002758:	462b      	mov	r3, r5
 800275a:	f7fd fef1 	bl	8000540 <__aeabi_dmul>
 800275e:	a376      	add	r3, pc, #472	; (adr r3, 8002938 <__ieee754_pow+0x720>)
 8002760:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002764:	f7fd fd36 	bl	80001d4 <__adddf3>
 8002768:	4622      	mov	r2, r4
 800276a:	462b      	mov	r3, r5
 800276c:	f7fd fee8 	bl	8000540 <__aeabi_dmul>
 8002770:	a373      	add	r3, pc, #460	; (adr r3, 8002940 <__ieee754_pow+0x728>)
 8002772:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002776:	f7fd fd2d 	bl	80001d4 <__adddf3>
 800277a:	4622      	mov	r2, r4
 800277c:	462b      	mov	r3, r5
 800277e:	f7fd fedf 	bl	8000540 <__aeabi_dmul>
 8002782:	a371      	add	r3, pc, #452	; (adr r3, 8002948 <__ieee754_pow+0x730>)
 8002784:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002788:	f7fd fd24 	bl	80001d4 <__adddf3>
 800278c:	4622      	mov	r2, r4
 800278e:	4606      	mov	r6, r0
 8002790:	460f      	mov	r7, r1
 8002792:	462b      	mov	r3, r5
 8002794:	4620      	mov	r0, r4
 8002796:	4629      	mov	r1, r5
 8002798:	f7fd fed2 	bl	8000540 <__aeabi_dmul>
 800279c:	4602      	mov	r2, r0
 800279e:	460b      	mov	r3, r1
 80027a0:	4630      	mov	r0, r6
 80027a2:	4639      	mov	r1, r7
 80027a4:	f7fd fecc 	bl	8000540 <__aeabi_dmul>
 80027a8:	4642      	mov	r2, r8
 80027aa:	4604      	mov	r4, r0
 80027ac:	460d      	mov	r5, r1
 80027ae:	464b      	mov	r3, r9
 80027b0:	ec51 0b18 	vmov	r0, r1, d8
 80027b4:	f7fd fd0e 	bl	80001d4 <__adddf3>
 80027b8:	ec53 2b19 	vmov	r2, r3, d9
 80027bc:	f7fd fec0 	bl	8000540 <__aeabi_dmul>
 80027c0:	4622      	mov	r2, r4
 80027c2:	462b      	mov	r3, r5
 80027c4:	f7fd fd06 	bl	80001d4 <__adddf3>
 80027c8:	4642      	mov	r2, r8
 80027ca:	4682      	mov	sl, r0
 80027cc:	468b      	mov	fp, r1
 80027ce:	464b      	mov	r3, r9
 80027d0:	4640      	mov	r0, r8
 80027d2:	4649      	mov	r1, r9
 80027d4:	f7fd feb4 	bl	8000540 <__aeabi_dmul>
 80027d8:	4b6b      	ldr	r3, [pc, #428]	; (8002988 <__ieee754_pow+0x770>)
 80027da:	2200      	movs	r2, #0
 80027dc:	4606      	mov	r6, r0
 80027de:	460f      	mov	r7, r1
 80027e0:	f7fd fcf8 	bl	80001d4 <__adddf3>
 80027e4:	4652      	mov	r2, sl
 80027e6:	465b      	mov	r3, fp
 80027e8:	f7fd fcf4 	bl	80001d4 <__adddf3>
 80027ec:	2000      	movs	r0, #0
 80027ee:	4604      	mov	r4, r0
 80027f0:	460d      	mov	r5, r1
 80027f2:	4602      	mov	r2, r0
 80027f4:	460b      	mov	r3, r1
 80027f6:	4640      	mov	r0, r8
 80027f8:	4649      	mov	r1, r9
 80027fa:	f7fd fea1 	bl	8000540 <__aeabi_dmul>
 80027fe:	4b62      	ldr	r3, [pc, #392]	; (8002988 <__ieee754_pow+0x770>)
 8002800:	4680      	mov	r8, r0
 8002802:	4689      	mov	r9, r1
 8002804:	2200      	movs	r2, #0
 8002806:	4620      	mov	r0, r4
 8002808:	4629      	mov	r1, r5
 800280a:	f7fd fce1 	bl	80001d0 <__aeabi_dsub>
 800280e:	4632      	mov	r2, r6
 8002810:	463b      	mov	r3, r7
 8002812:	f7fd fcdd 	bl	80001d0 <__aeabi_dsub>
 8002816:	4602      	mov	r2, r0
 8002818:	460b      	mov	r3, r1
 800281a:	4650      	mov	r0, sl
 800281c:	4659      	mov	r1, fp
 800281e:	f7fd fcd7 	bl	80001d0 <__aeabi_dsub>
 8002822:	ec53 2b18 	vmov	r2, r3, d8
 8002826:	f7fd fe8b 	bl	8000540 <__aeabi_dmul>
 800282a:	4622      	mov	r2, r4
 800282c:	4606      	mov	r6, r0
 800282e:	460f      	mov	r7, r1
 8002830:	462b      	mov	r3, r5
 8002832:	ec51 0b19 	vmov	r0, r1, d9
 8002836:	f7fd fe83 	bl	8000540 <__aeabi_dmul>
 800283a:	4602      	mov	r2, r0
 800283c:	460b      	mov	r3, r1
 800283e:	4630      	mov	r0, r6
 8002840:	4639      	mov	r1, r7
 8002842:	f7fd fcc7 	bl	80001d4 <__adddf3>
 8002846:	4606      	mov	r6, r0
 8002848:	460f      	mov	r7, r1
 800284a:	4602      	mov	r2, r0
 800284c:	460b      	mov	r3, r1
 800284e:	4640      	mov	r0, r8
 8002850:	4649      	mov	r1, r9
 8002852:	f7fd fcbf 	bl	80001d4 <__adddf3>
 8002856:	a33e      	add	r3, pc, #248	; (adr r3, 8002950 <__ieee754_pow+0x738>)
 8002858:	e9d3 2300 	ldrd	r2, r3, [r3]
 800285c:	2000      	movs	r0, #0
 800285e:	4604      	mov	r4, r0
 8002860:	460d      	mov	r5, r1
 8002862:	f7fd fe6d 	bl	8000540 <__aeabi_dmul>
 8002866:	4642      	mov	r2, r8
 8002868:	ec41 0b18 	vmov	d8, r0, r1
 800286c:	464b      	mov	r3, r9
 800286e:	4620      	mov	r0, r4
 8002870:	4629      	mov	r1, r5
 8002872:	f7fd fcad 	bl	80001d0 <__aeabi_dsub>
 8002876:	4602      	mov	r2, r0
 8002878:	460b      	mov	r3, r1
 800287a:	4630      	mov	r0, r6
 800287c:	4639      	mov	r1, r7
 800287e:	f7fd fca7 	bl	80001d0 <__aeabi_dsub>
 8002882:	a335      	add	r3, pc, #212	; (adr r3, 8002958 <__ieee754_pow+0x740>)
 8002884:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002888:	f7fd fe5a 	bl	8000540 <__aeabi_dmul>
 800288c:	a334      	add	r3, pc, #208	; (adr r3, 8002960 <__ieee754_pow+0x748>)
 800288e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002892:	4606      	mov	r6, r0
 8002894:	460f      	mov	r7, r1
 8002896:	4620      	mov	r0, r4
 8002898:	4629      	mov	r1, r5
 800289a:	f7fd fe51 	bl	8000540 <__aeabi_dmul>
 800289e:	4602      	mov	r2, r0
 80028a0:	460b      	mov	r3, r1
 80028a2:	4630      	mov	r0, r6
 80028a4:	4639      	mov	r1, r7
 80028a6:	f7fd fc95 	bl	80001d4 <__adddf3>
 80028aa:	9a07      	ldr	r2, [sp, #28]
 80028ac:	4b37      	ldr	r3, [pc, #220]	; (800298c <__ieee754_pow+0x774>)
 80028ae:	4413      	add	r3, r2
 80028b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028b4:	f7fd fc8e 	bl	80001d4 <__adddf3>
 80028b8:	4682      	mov	sl, r0
 80028ba:	9805      	ldr	r0, [sp, #20]
 80028bc:	468b      	mov	fp, r1
 80028be:	f7fd fdd5 	bl	800046c <__aeabi_i2d>
 80028c2:	9a07      	ldr	r2, [sp, #28]
 80028c4:	4b32      	ldr	r3, [pc, #200]	; (8002990 <__ieee754_pow+0x778>)
 80028c6:	4413      	add	r3, r2
 80028c8:	e9d3 8900 	ldrd	r8, r9, [r3]
 80028cc:	4606      	mov	r6, r0
 80028ce:	460f      	mov	r7, r1
 80028d0:	4652      	mov	r2, sl
 80028d2:	465b      	mov	r3, fp
 80028d4:	ec51 0b18 	vmov	r0, r1, d8
 80028d8:	f7fd fc7c 	bl	80001d4 <__adddf3>
 80028dc:	4642      	mov	r2, r8
 80028de:	464b      	mov	r3, r9
 80028e0:	f7fd fc78 	bl	80001d4 <__adddf3>
 80028e4:	4632      	mov	r2, r6
 80028e6:	463b      	mov	r3, r7
 80028e8:	f7fd fc74 	bl	80001d4 <__adddf3>
 80028ec:	2000      	movs	r0, #0
 80028ee:	4632      	mov	r2, r6
 80028f0:	463b      	mov	r3, r7
 80028f2:	4604      	mov	r4, r0
 80028f4:	460d      	mov	r5, r1
 80028f6:	f7fd fc6b 	bl	80001d0 <__aeabi_dsub>
 80028fa:	4642      	mov	r2, r8
 80028fc:	464b      	mov	r3, r9
 80028fe:	f7fd fc67 	bl	80001d0 <__aeabi_dsub>
 8002902:	ec53 2b18 	vmov	r2, r3, d8
 8002906:	f7fd fc63 	bl	80001d0 <__aeabi_dsub>
 800290a:	4602      	mov	r2, r0
 800290c:	460b      	mov	r3, r1
 800290e:	4650      	mov	r0, sl
 8002910:	4659      	mov	r1, fp
 8002912:	e610      	b.n	8002536 <__ieee754_pow+0x31e>
 8002914:	2401      	movs	r4, #1
 8002916:	e6a1      	b.n	800265c <__ieee754_pow+0x444>
 8002918:	ed9f 7b13 	vldr	d7, [pc, #76]	; 8002968 <__ieee754_pow+0x750>
 800291c:	e617      	b.n	800254e <__ieee754_pow+0x336>
 800291e:	bf00      	nop
 8002920:	4a454eef 	.word	0x4a454eef
 8002924:	3fca7e28 	.word	0x3fca7e28
 8002928:	93c9db65 	.word	0x93c9db65
 800292c:	3fcd864a 	.word	0x3fcd864a
 8002930:	a91d4101 	.word	0xa91d4101
 8002934:	3fd17460 	.word	0x3fd17460
 8002938:	518f264d 	.word	0x518f264d
 800293c:	3fd55555 	.word	0x3fd55555
 8002940:	db6fabff 	.word	0xdb6fabff
 8002944:	3fdb6db6 	.word	0x3fdb6db6
 8002948:	33333303 	.word	0x33333303
 800294c:	3fe33333 	.word	0x3fe33333
 8002950:	e0000000 	.word	0xe0000000
 8002954:	3feec709 	.word	0x3feec709
 8002958:	dc3a03fd 	.word	0xdc3a03fd
 800295c:	3feec709 	.word	0x3feec709
 8002960:	145b01f5 	.word	0x145b01f5
 8002964:	be3e2fe0 	.word	0xbe3e2fe0
 8002968:	00000000 	.word	0x00000000
 800296c:	3ff00000 	.word	0x3ff00000
 8002970:	7ff00000 	.word	0x7ff00000
 8002974:	43400000 	.word	0x43400000
 8002978:	0003988e 	.word	0x0003988e
 800297c:	000bb679 	.word	0x000bb679
 8002980:	08002fe8 	.word	0x08002fe8
 8002984:	3ff00000 	.word	0x3ff00000
 8002988:	40080000 	.word	0x40080000
 800298c:	08003008 	.word	0x08003008
 8002990:	08002ff8 	.word	0x08002ff8
 8002994:	a3b3      	add	r3, pc, #716	; (adr r3, 8002c64 <__ieee754_pow+0xa4c>)
 8002996:	e9d3 2300 	ldrd	r2, r3, [r3]
 800299a:	4640      	mov	r0, r8
 800299c:	4649      	mov	r1, r9
 800299e:	f7fd fc19 	bl	80001d4 <__adddf3>
 80029a2:	4622      	mov	r2, r4
 80029a4:	ec41 0b1a 	vmov	d10, r0, r1
 80029a8:	462b      	mov	r3, r5
 80029aa:	4630      	mov	r0, r6
 80029ac:	4639      	mov	r1, r7
 80029ae:	f7fd fc0f 	bl	80001d0 <__aeabi_dsub>
 80029b2:	4602      	mov	r2, r0
 80029b4:	460b      	mov	r3, r1
 80029b6:	ec51 0b1a 	vmov	r0, r1, d10
 80029ba:	f7fe f851 	bl	8000a60 <__aeabi_dcmpgt>
 80029be:	2800      	cmp	r0, #0
 80029c0:	f47f ae04 	bne.w	80025cc <__ieee754_pow+0x3b4>
 80029c4:	4aa2      	ldr	r2, [pc, #648]	; (8002c50 <__ieee754_pow+0xa38>)
 80029c6:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80029ca:	4293      	cmp	r3, r2
 80029cc:	f340 8107 	ble.w	8002bde <__ieee754_pow+0x9c6>
 80029d0:	151b      	asrs	r3, r3, #20
 80029d2:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 80029d6:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 80029da:	fa4a fa03 	asr.w	sl, sl, r3
 80029de:	44da      	add	sl, fp
 80029e0:	f3ca 510a 	ubfx	r1, sl, #20, #11
 80029e4:	489b      	ldr	r0, [pc, #620]	; (8002c54 <__ieee754_pow+0xa3c>)
 80029e6:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 80029ea:	4108      	asrs	r0, r1
 80029ec:	ea00 030a 	and.w	r3, r0, sl
 80029f0:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 80029f4:	f1c1 0114 	rsb	r1, r1, #20
 80029f8:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 80029fc:	fa4a fa01 	asr.w	sl, sl, r1
 8002a00:	f1bb 0f00 	cmp.w	fp, #0
 8002a04:	f04f 0200 	mov.w	r2, #0
 8002a08:	4620      	mov	r0, r4
 8002a0a:	4629      	mov	r1, r5
 8002a0c:	bfb8      	it	lt
 8002a0e:	f1ca 0a00 	rsblt	sl, sl, #0
 8002a12:	f7fd fbdd 	bl	80001d0 <__aeabi_dsub>
 8002a16:	ec41 0b19 	vmov	d9, r0, r1
 8002a1a:	4642      	mov	r2, r8
 8002a1c:	464b      	mov	r3, r9
 8002a1e:	ec51 0b19 	vmov	r0, r1, d9
 8002a22:	f7fd fbd7 	bl	80001d4 <__adddf3>
 8002a26:	a37a      	add	r3, pc, #488	; (adr r3, 8002c10 <__ieee754_pow+0x9f8>)
 8002a28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a2c:	2000      	movs	r0, #0
 8002a2e:	4604      	mov	r4, r0
 8002a30:	460d      	mov	r5, r1
 8002a32:	f7fd fd85 	bl	8000540 <__aeabi_dmul>
 8002a36:	ec53 2b19 	vmov	r2, r3, d9
 8002a3a:	4606      	mov	r6, r0
 8002a3c:	460f      	mov	r7, r1
 8002a3e:	4620      	mov	r0, r4
 8002a40:	4629      	mov	r1, r5
 8002a42:	f7fd fbc5 	bl	80001d0 <__aeabi_dsub>
 8002a46:	4602      	mov	r2, r0
 8002a48:	460b      	mov	r3, r1
 8002a4a:	4640      	mov	r0, r8
 8002a4c:	4649      	mov	r1, r9
 8002a4e:	f7fd fbbf 	bl	80001d0 <__aeabi_dsub>
 8002a52:	a371      	add	r3, pc, #452	; (adr r3, 8002c18 <__ieee754_pow+0xa00>)
 8002a54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a58:	f7fd fd72 	bl	8000540 <__aeabi_dmul>
 8002a5c:	a370      	add	r3, pc, #448	; (adr r3, 8002c20 <__ieee754_pow+0xa08>)
 8002a5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a62:	4680      	mov	r8, r0
 8002a64:	4689      	mov	r9, r1
 8002a66:	4620      	mov	r0, r4
 8002a68:	4629      	mov	r1, r5
 8002a6a:	f7fd fd69 	bl	8000540 <__aeabi_dmul>
 8002a6e:	4602      	mov	r2, r0
 8002a70:	460b      	mov	r3, r1
 8002a72:	4640      	mov	r0, r8
 8002a74:	4649      	mov	r1, r9
 8002a76:	f7fd fbad 	bl	80001d4 <__adddf3>
 8002a7a:	4604      	mov	r4, r0
 8002a7c:	460d      	mov	r5, r1
 8002a7e:	4602      	mov	r2, r0
 8002a80:	460b      	mov	r3, r1
 8002a82:	4630      	mov	r0, r6
 8002a84:	4639      	mov	r1, r7
 8002a86:	f7fd fba5 	bl	80001d4 <__adddf3>
 8002a8a:	4632      	mov	r2, r6
 8002a8c:	463b      	mov	r3, r7
 8002a8e:	4680      	mov	r8, r0
 8002a90:	4689      	mov	r9, r1
 8002a92:	f7fd fb9d 	bl	80001d0 <__aeabi_dsub>
 8002a96:	4602      	mov	r2, r0
 8002a98:	460b      	mov	r3, r1
 8002a9a:	4620      	mov	r0, r4
 8002a9c:	4629      	mov	r1, r5
 8002a9e:	f7fd fb97 	bl	80001d0 <__aeabi_dsub>
 8002aa2:	4642      	mov	r2, r8
 8002aa4:	4606      	mov	r6, r0
 8002aa6:	460f      	mov	r7, r1
 8002aa8:	464b      	mov	r3, r9
 8002aaa:	4640      	mov	r0, r8
 8002aac:	4649      	mov	r1, r9
 8002aae:	f7fd fd47 	bl	8000540 <__aeabi_dmul>
 8002ab2:	a35d      	add	r3, pc, #372	; (adr r3, 8002c28 <__ieee754_pow+0xa10>)
 8002ab4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ab8:	4604      	mov	r4, r0
 8002aba:	460d      	mov	r5, r1
 8002abc:	f7fd fd40 	bl	8000540 <__aeabi_dmul>
 8002ac0:	a35b      	add	r3, pc, #364	; (adr r3, 8002c30 <__ieee754_pow+0xa18>)
 8002ac2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ac6:	f7fd fb83 	bl	80001d0 <__aeabi_dsub>
 8002aca:	4622      	mov	r2, r4
 8002acc:	462b      	mov	r3, r5
 8002ace:	f7fd fd37 	bl	8000540 <__aeabi_dmul>
 8002ad2:	a359      	add	r3, pc, #356	; (adr r3, 8002c38 <__ieee754_pow+0xa20>)
 8002ad4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ad8:	f7fd fb7c 	bl	80001d4 <__adddf3>
 8002adc:	4622      	mov	r2, r4
 8002ade:	462b      	mov	r3, r5
 8002ae0:	f7fd fd2e 	bl	8000540 <__aeabi_dmul>
 8002ae4:	a356      	add	r3, pc, #344	; (adr r3, 8002c40 <__ieee754_pow+0xa28>)
 8002ae6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002aea:	f7fd fb71 	bl	80001d0 <__aeabi_dsub>
 8002aee:	4622      	mov	r2, r4
 8002af0:	462b      	mov	r3, r5
 8002af2:	f7fd fd25 	bl	8000540 <__aeabi_dmul>
 8002af6:	a354      	add	r3, pc, #336	; (adr r3, 8002c48 <__ieee754_pow+0xa30>)
 8002af8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002afc:	f7fd fb6a 	bl	80001d4 <__adddf3>
 8002b00:	4622      	mov	r2, r4
 8002b02:	462b      	mov	r3, r5
 8002b04:	f7fd fd1c 	bl	8000540 <__aeabi_dmul>
 8002b08:	4602      	mov	r2, r0
 8002b0a:	460b      	mov	r3, r1
 8002b0c:	4640      	mov	r0, r8
 8002b0e:	4649      	mov	r1, r9
 8002b10:	f7fd fb5e 	bl	80001d0 <__aeabi_dsub>
 8002b14:	4604      	mov	r4, r0
 8002b16:	460d      	mov	r5, r1
 8002b18:	4602      	mov	r2, r0
 8002b1a:	460b      	mov	r3, r1
 8002b1c:	4640      	mov	r0, r8
 8002b1e:	4649      	mov	r1, r9
 8002b20:	f7fd fd0e 	bl	8000540 <__aeabi_dmul>
 8002b24:	2200      	movs	r2, #0
 8002b26:	ec41 0b19 	vmov	d9, r0, r1
 8002b2a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002b2e:	4620      	mov	r0, r4
 8002b30:	4629      	mov	r1, r5
 8002b32:	f7fd fb4d 	bl	80001d0 <__aeabi_dsub>
 8002b36:	4602      	mov	r2, r0
 8002b38:	460b      	mov	r3, r1
 8002b3a:	ec51 0b19 	vmov	r0, r1, d9
 8002b3e:	f7fd fe29 	bl	8000794 <__aeabi_ddiv>
 8002b42:	4632      	mov	r2, r6
 8002b44:	4604      	mov	r4, r0
 8002b46:	460d      	mov	r5, r1
 8002b48:	463b      	mov	r3, r7
 8002b4a:	4640      	mov	r0, r8
 8002b4c:	4649      	mov	r1, r9
 8002b4e:	f7fd fcf7 	bl	8000540 <__aeabi_dmul>
 8002b52:	4632      	mov	r2, r6
 8002b54:	463b      	mov	r3, r7
 8002b56:	f7fd fb3d 	bl	80001d4 <__adddf3>
 8002b5a:	4602      	mov	r2, r0
 8002b5c:	460b      	mov	r3, r1
 8002b5e:	4620      	mov	r0, r4
 8002b60:	4629      	mov	r1, r5
 8002b62:	f7fd fb35 	bl	80001d0 <__aeabi_dsub>
 8002b66:	4642      	mov	r2, r8
 8002b68:	464b      	mov	r3, r9
 8002b6a:	f7fd fb31 	bl	80001d0 <__aeabi_dsub>
 8002b6e:	460b      	mov	r3, r1
 8002b70:	4602      	mov	r2, r0
 8002b72:	4939      	ldr	r1, [pc, #228]	; (8002c58 <__ieee754_pow+0xa40>)
 8002b74:	2000      	movs	r0, #0
 8002b76:	f7fd fb2b 	bl	80001d0 <__aeabi_dsub>
 8002b7a:	ec41 0b10 	vmov	d0, r0, r1
 8002b7e:	ee10 3a90 	vmov	r3, s1
 8002b82:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8002b86:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002b8a:	da2b      	bge.n	8002be4 <__ieee754_pow+0x9cc>
 8002b8c:	4650      	mov	r0, sl
 8002b8e:	f000 f877 	bl	8002c80 <scalbn>
 8002b92:	ec51 0b10 	vmov	r0, r1, d0
 8002b96:	ec53 2b18 	vmov	r2, r3, d8
 8002b9a:	f7ff bbee 	b.w	800237a <__ieee754_pow+0x162>
 8002b9e:	4b2f      	ldr	r3, [pc, #188]	; (8002c5c <__ieee754_pow+0xa44>)
 8002ba0:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8002ba4:	429e      	cmp	r6, r3
 8002ba6:	f77f af0d 	ble.w	80029c4 <__ieee754_pow+0x7ac>
 8002baa:	4b2d      	ldr	r3, [pc, #180]	; (8002c60 <__ieee754_pow+0xa48>)
 8002bac:	440b      	add	r3, r1
 8002bae:	4303      	orrs	r3, r0
 8002bb0:	d009      	beq.n	8002bc6 <__ieee754_pow+0x9ae>
 8002bb2:	ec51 0b18 	vmov	r0, r1, d8
 8002bb6:	2200      	movs	r2, #0
 8002bb8:	2300      	movs	r3, #0
 8002bba:	f7fd ff33 	bl	8000a24 <__aeabi_dcmplt>
 8002bbe:	3800      	subs	r0, #0
 8002bc0:	bf18      	it	ne
 8002bc2:	2001      	movne	r0, #1
 8002bc4:	e448      	b.n	8002458 <__ieee754_pow+0x240>
 8002bc6:	4622      	mov	r2, r4
 8002bc8:	462b      	mov	r3, r5
 8002bca:	f7fd fb01 	bl	80001d0 <__aeabi_dsub>
 8002bce:	4642      	mov	r2, r8
 8002bd0:	464b      	mov	r3, r9
 8002bd2:	f7fd ff3b 	bl	8000a4c <__aeabi_dcmpge>
 8002bd6:	2800      	cmp	r0, #0
 8002bd8:	f43f aef4 	beq.w	80029c4 <__ieee754_pow+0x7ac>
 8002bdc:	e7e9      	b.n	8002bb2 <__ieee754_pow+0x99a>
 8002bde:	f04f 0a00 	mov.w	sl, #0
 8002be2:	e71a      	b.n	8002a1a <__ieee754_pow+0x802>
 8002be4:	ec51 0b10 	vmov	r0, r1, d0
 8002be8:	4619      	mov	r1, r3
 8002bea:	e7d4      	b.n	8002b96 <__ieee754_pow+0x97e>
 8002bec:	491a      	ldr	r1, [pc, #104]	; (8002c58 <__ieee754_pow+0xa40>)
 8002bee:	2000      	movs	r0, #0
 8002bf0:	f7ff bb31 	b.w	8002256 <__ieee754_pow+0x3e>
 8002bf4:	2000      	movs	r0, #0
 8002bf6:	2100      	movs	r1, #0
 8002bf8:	f7ff bb2d 	b.w	8002256 <__ieee754_pow+0x3e>
 8002bfc:	4630      	mov	r0, r6
 8002bfe:	4639      	mov	r1, r7
 8002c00:	f7ff bb29 	b.w	8002256 <__ieee754_pow+0x3e>
 8002c04:	9204      	str	r2, [sp, #16]
 8002c06:	f7ff bb7b 	b.w	8002300 <__ieee754_pow+0xe8>
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	f7ff bb65 	b.w	80022da <__ieee754_pow+0xc2>
 8002c10:	00000000 	.word	0x00000000
 8002c14:	3fe62e43 	.word	0x3fe62e43
 8002c18:	fefa39ef 	.word	0xfefa39ef
 8002c1c:	3fe62e42 	.word	0x3fe62e42
 8002c20:	0ca86c39 	.word	0x0ca86c39
 8002c24:	be205c61 	.word	0xbe205c61
 8002c28:	72bea4d0 	.word	0x72bea4d0
 8002c2c:	3e663769 	.word	0x3e663769
 8002c30:	c5d26bf1 	.word	0xc5d26bf1
 8002c34:	3ebbbd41 	.word	0x3ebbbd41
 8002c38:	af25de2c 	.word	0xaf25de2c
 8002c3c:	3f11566a 	.word	0x3f11566a
 8002c40:	16bebd93 	.word	0x16bebd93
 8002c44:	3f66c16c 	.word	0x3f66c16c
 8002c48:	5555553e 	.word	0x5555553e
 8002c4c:	3fc55555 	.word	0x3fc55555
 8002c50:	3fe00000 	.word	0x3fe00000
 8002c54:	fff00000 	.word	0xfff00000
 8002c58:	3ff00000 	.word	0x3ff00000
 8002c5c:	4090cbff 	.word	0x4090cbff
 8002c60:	3f6f3400 	.word	0x3f6f3400
 8002c64:	652b82fe 	.word	0x652b82fe
 8002c68:	3c971547 	.word	0x3c971547

08002c6c <fabs>:
 8002c6c:	ec51 0b10 	vmov	r0, r1, d0
 8002c70:	ee10 2a10 	vmov	r2, s0
 8002c74:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8002c78:	ec43 2b10 	vmov	d0, r2, r3
 8002c7c:	4770      	bx	lr
	...

08002c80 <scalbn>:
 8002c80:	b570      	push	{r4, r5, r6, lr}
 8002c82:	ec55 4b10 	vmov	r4, r5, d0
 8002c86:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8002c8a:	4606      	mov	r6, r0
 8002c8c:	462b      	mov	r3, r5
 8002c8e:	b999      	cbnz	r1, 8002cb8 <scalbn+0x38>
 8002c90:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8002c94:	4323      	orrs	r3, r4
 8002c96:	d03f      	beq.n	8002d18 <scalbn+0x98>
 8002c98:	4b35      	ldr	r3, [pc, #212]	; (8002d70 <scalbn+0xf0>)
 8002c9a:	4629      	mov	r1, r5
 8002c9c:	ee10 0a10 	vmov	r0, s0
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	f7fd fc4d 	bl	8000540 <__aeabi_dmul>
 8002ca6:	4b33      	ldr	r3, [pc, #204]	; (8002d74 <scalbn+0xf4>)
 8002ca8:	429e      	cmp	r6, r3
 8002caa:	4604      	mov	r4, r0
 8002cac:	460d      	mov	r5, r1
 8002cae:	da10      	bge.n	8002cd2 <scalbn+0x52>
 8002cb0:	a327      	add	r3, pc, #156	; (adr r3, 8002d50 <scalbn+0xd0>)
 8002cb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cb6:	e01f      	b.n	8002cf8 <scalbn+0x78>
 8002cb8:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8002cbc:	4291      	cmp	r1, r2
 8002cbe:	d10c      	bne.n	8002cda <scalbn+0x5a>
 8002cc0:	ee10 2a10 	vmov	r2, s0
 8002cc4:	4620      	mov	r0, r4
 8002cc6:	4629      	mov	r1, r5
 8002cc8:	f7fd fa84 	bl	80001d4 <__adddf3>
 8002ccc:	4604      	mov	r4, r0
 8002cce:	460d      	mov	r5, r1
 8002cd0:	e022      	b.n	8002d18 <scalbn+0x98>
 8002cd2:	460b      	mov	r3, r1
 8002cd4:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8002cd8:	3936      	subs	r1, #54	; 0x36
 8002cda:	f24c 3250 	movw	r2, #50000	; 0xc350
 8002cde:	4296      	cmp	r6, r2
 8002ce0:	dd0d      	ble.n	8002cfe <scalbn+0x7e>
 8002ce2:	2d00      	cmp	r5, #0
 8002ce4:	a11c      	add	r1, pc, #112	; (adr r1, 8002d58 <scalbn+0xd8>)
 8002ce6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002cea:	da02      	bge.n	8002cf2 <scalbn+0x72>
 8002cec:	a11c      	add	r1, pc, #112	; (adr r1, 8002d60 <scalbn+0xe0>)
 8002cee:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002cf2:	a319      	add	r3, pc, #100	; (adr r3, 8002d58 <scalbn+0xd8>)
 8002cf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cf8:	f7fd fc22 	bl	8000540 <__aeabi_dmul>
 8002cfc:	e7e6      	b.n	8002ccc <scalbn+0x4c>
 8002cfe:	1872      	adds	r2, r6, r1
 8002d00:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8002d04:	428a      	cmp	r2, r1
 8002d06:	dcec      	bgt.n	8002ce2 <scalbn+0x62>
 8002d08:	2a00      	cmp	r2, #0
 8002d0a:	dd08      	ble.n	8002d1e <scalbn+0x9e>
 8002d0c:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8002d10:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8002d14:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8002d18:	ec45 4b10 	vmov	d0, r4, r5
 8002d1c:	bd70      	pop	{r4, r5, r6, pc}
 8002d1e:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8002d22:	da08      	bge.n	8002d36 <scalbn+0xb6>
 8002d24:	2d00      	cmp	r5, #0
 8002d26:	a10a      	add	r1, pc, #40	; (adr r1, 8002d50 <scalbn+0xd0>)
 8002d28:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002d2c:	dac0      	bge.n	8002cb0 <scalbn+0x30>
 8002d2e:	a10e      	add	r1, pc, #56	; (adr r1, 8002d68 <scalbn+0xe8>)
 8002d30:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002d34:	e7bc      	b.n	8002cb0 <scalbn+0x30>
 8002d36:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8002d3a:	3236      	adds	r2, #54	; 0x36
 8002d3c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8002d40:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8002d44:	4620      	mov	r0, r4
 8002d46:	4b0c      	ldr	r3, [pc, #48]	; (8002d78 <scalbn+0xf8>)
 8002d48:	2200      	movs	r2, #0
 8002d4a:	e7d5      	b.n	8002cf8 <scalbn+0x78>
 8002d4c:	f3af 8000 	nop.w
 8002d50:	c2f8f359 	.word	0xc2f8f359
 8002d54:	01a56e1f 	.word	0x01a56e1f
 8002d58:	8800759c 	.word	0x8800759c
 8002d5c:	7e37e43c 	.word	0x7e37e43c
 8002d60:	8800759c 	.word	0x8800759c
 8002d64:	fe37e43c 	.word	0xfe37e43c
 8002d68:	c2f8f359 	.word	0xc2f8f359
 8002d6c:	81a56e1f 	.word	0x81a56e1f
 8002d70:	43500000 	.word	0x43500000
 8002d74:	ffff3cb0 	.word	0xffff3cb0
 8002d78:	3c900000 	.word	0x3c900000

08002d7c <with_errno>:
 8002d7c:	b570      	push	{r4, r5, r6, lr}
 8002d7e:	4604      	mov	r4, r0
 8002d80:	460d      	mov	r5, r1
 8002d82:	4616      	mov	r6, r2
 8002d84:	f7ff f9a0 	bl	80020c8 <__errno>
 8002d88:	4629      	mov	r1, r5
 8002d8a:	6006      	str	r6, [r0, #0]
 8002d8c:	4620      	mov	r0, r4
 8002d8e:	bd70      	pop	{r4, r5, r6, pc}

08002d90 <xflow>:
 8002d90:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002d92:	4614      	mov	r4, r2
 8002d94:	461d      	mov	r5, r3
 8002d96:	b108      	cbz	r0, 8002d9c <xflow+0xc>
 8002d98:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8002d9c:	e9cd 2300 	strd	r2, r3, [sp]
 8002da0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8002da4:	4620      	mov	r0, r4
 8002da6:	4629      	mov	r1, r5
 8002da8:	f7fd fbca 	bl	8000540 <__aeabi_dmul>
 8002dac:	2222      	movs	r2, #34	; 0x22
 8002dae:	b003      	add	sp, #12
 8002db0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8002db4:	f7ff bfe2 	b.w	8002d7c <with_errno>

08002db8 <__math_uflow>:
 8002db8:	b508      	push	{r3, lr}
 8002dba:	2200      	movs	r2, #0
 8002dbc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8002dc0:	f7ff ffe6 	bl	8002d90 <xflow>
 8002dc4:	ec41 0b10 	vmov	d0, r0, r1
 8002dc8:	bd08      	pop	{r3, pc}

08002dca <__math_oflow>:
 8002dca:	b508      	push	{r3, lr}
 8002dcc:	2200      	movs	r2, #0
 8002dce:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8002dd2:	f7ff ffdd 	bl	8002d90 <xflow>
 8002dd6:	ec41 0b10 	vmov	d0, r0, r1
 8002dda:	bd08      	pop	{r3, pc}

08002ddc <__ieee754_sqrt>:
 8002ddc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002de0:	ec55 4b10 	vmov	r4, r5, d0
 8002de4:	4e67      	ldr	r6, [pc, #412]	; (8002f84 <__ieee754_sqrt+0x1a8>)
 8002de6:	43ae      	bics	r6, r5
 8002de8:	ee10 0a10 	vmov	r0, s0
 8002dec:	ee10 2a10 	vmov	r2, s0
 8002df0:	4629      	mov	r1, r5
 8002df2:	462b      	mov	r3, r5
 8002df4:	d10d      	bne.n	8002e12 <__ieee754_sqrt+0x36>
 8002df6:	f7fd fba3 	bl	8000540 <__aeabi_dmul>
 8002dfa:	4602      	mov	r2, r0
 8002dfc:	460b      	mov	r3, r1
 8002dfe:	4620      	mov	r0, r4
 8002e00:	4629      	mov	r1, r5
 8002e02:	f7fd f9e7 	bl	80001d4 <__adddf3>
 8002e06:	4604      	mov	r4, r0
 8002e08:	460d      	mov	r5, r1
 8002e0a:	ec45 4b10 	vmov	d0, r4, r5
 8002e0e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002e12:	2d00      	cmp	r5, #0
 8002e14:	dc0b      	bgt.n	8002e2e <__ieee754_sqrt+0x52>
 8002e16:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8002e1a:	4326      	orrs	r6, r4
 8002e1c:	d0f5      	beq.n	8002e0a <__ieee754_sqrt+0x2e>
 8002e1e:	b135      	cbz	r5, 8002e2e <__ieee754_sqrt+0x52>
 8002e20:	f7fd f9d6 	bl	80001d0 <__aeabi_dsub>
 8002e24:	4602      	mov	r2, r0
 8002e26:	460b      	mov	r3, r1
 8002e28:	f7fd fcb4 	bl	8000794 <__aeabi_ddiv>
 8002e2c:	e7eb      	b.n	8002e06 <__ieee754_sqrt+0x2a>
 8002e2e:	1509      	asrs	r1, r1, #20
 8002e30:	f000 808d 	beq.w	8002f4e <__ieee754_sqrt+0x172>
 8002e34:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002e38:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 8002e3c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002e40:	07c9      	lsls	r1, r1, #31
 8002e42:	bf5c      	itt	pl
 8002e44:	005b      	lslpl	r3, r3, #1
 8002e46:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 8002e4a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8002e4e:	bf58      	it	pl
 8002e50:	0052      	lslpl	r2, r2, #1
 8002e52:	2500      	movs	r5, #0
 8002e54:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8002e58:	1076      	asrs	r6, r6, #1
 8002e5a:	0052      	lsls	r2, r2, #1
 8002e5c:	f04f 0e16 	mov.w	lr, #22
 8002e60:	46ac      	mov	ip, r5
 8002e62:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8002e66:	eb0c 0001 	add.w	r0, ip, r1
 8002e6a:	4298      	cmp	r0, r3
 8002e6c:	bfde      	ittt	le
 8002e6e:	1a1b      	suble	r3, r3, r0
 8002e70:	eb00 0c01 	addle.w	ip, r0, r1
 8002e74:	186d      	addle	r5, r5, r1
 8002e76:	005b      	lsls	r3, r3, #1
 8002e78:	f1be 0e01 	subs.w	lr, lr, #1
 8002e7c:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8002e80:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8002e84:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8002e88:	d1ed      	bne.n	8002e66 <__ieee754_sqrt+0x8a>
 8002e8a:	4674      	mov	r4, lr
 8002e8c:	2720      	movs	r7, #32
 8002e8e:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8002e92:	4563      	cmp	r3, ip
 8002e94:	eb01 000e 	add.w	r0, r1, lr
 8002e98:	dc02      	bgt.n	8002ea0 <__ieee754_sqrt+0xc4>
 8002e9a:	d113      	bne.n	8002ec4 <__ieee754_sqrt+0xe8>
 8002e9c:	4290      	cmp	r0, r2
 8002e9e:	d811      	bhi.n	8002ec4 <__ieee754_sqrt+0xe8>
 8002ea0:	2800      	cmp	r0, #0
 8002ea2:	eb00 0e01 	add.w	lr, r0, r1
 8002ea6:	da57      	bge.n	8002f58 <__ieee754_sqrt+0x17c>
 8002ea8:	f1be 0f00 	cmp.w	lr, #0
 8002eac:	db54      	blt.n	8002f58 <__ieee754_sqrt+0x17c>
 8002eae:	f10c 0801 	add.w	r8, ip, #1
 8002eb2:	eba3 030c 	sub.w	r3, r3, ip
 8002eb6:	4290      	cmp	r0, r2
 8002eb8:	bf88      	it	hi
 8002eba:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8002ebe:	1a12      	subs	r2, r2, r0
 8002ec0:	440c      	add	r4, r1
 8002ec2:	46c4      	mov	ip, r8
 8002ec4:	005b      	lsls	r3, r3, #1
 8002ec6:	3f01      	subs	r7, #1
 8002ec8:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8002ecc:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8002ed0:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8002ed4:	d1dd      	bne.n	8002e92 <__ieee754_sqrt+0xb6>
 8002ed6:	4313      	orrs	r3, r2
 8002ed8:	d01b      	beq.n	8002f12 <__ieee754_sqrt+0x136>
 8002eda:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 8002f88 <__ieee754_sqrt+0x1ac>
 8002ede:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 8002f8c <__ieee754_sqrt+0x1b0>
 8002ee2:	e9da 0100 	ldrd	r0, r1, [sl]
 8002ee6:	e9db 2300 	ldrd	r2, r3, [fp]
 8002eea:	f7fd f971 	bl	80001d0 <__aeabi_dsub>
 8002eee:	e9da 8900 	ldrd	r8, r9, [sl]
 8002ef2:	4602      	mov	r2, r0
 8002ef4:	460b      	mov	r3, r1
 8002ef6:	4640      	mov	r0, r8
 8002ef8:	4649      	mov	r1, r9
 8002efa:	f7fd fd9d 	bl	8000a38 <__aeabi_dcmple>
 8002efe:	b140      	cbz	r0, 8002f12 <__ieee754_sqrt+0x136>
 8002f00:	f1b4 3fff 	cmp.w	r4, #4294967295
 8002f04:	e9da 0100 	ldrd	r0, r1, [sl]
 8002f08:	e9db 2300 	ldrd	r2, r3, [fp]
 8002f0c:	d126      	bne.n	8002f5c <__ieee754_sqrt+0x180>
 8002f0e:	3501      	adds	r5, #1
 8002f10:	463c      	mov	r4, r7
 8002f12:	106a      	asrs	r2, r5, #1
 8002f14:	0863      	lsrs	r3, r4, #1
 8002f16:	07e9      	lsls	r1, r5, #31
 8002f18:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8002f1c:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8002f20:	bf48      	it	mi
 8002f22:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8002f26:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 8002f2a:	461c      	mov	r4, r3
 8002f2c:	e76d      	b.n	8002e0a <__ieee754_sqrt+0x2e>
 8002f2e:	0ad3      	lsrs	r3, r2, #11
 8002f30:	3815      	subs	r0, #21
 8002f32:	0552      	lsls	r2, r2, #21
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d0fa      	beq.n	8002f2e <__ieee754_sqrt+0x152>
 8002f38:	02dc      	lsls	r4, r3, #11
 8002f3a:	d50a      	bpl.n	8002f52 <__ieee754_sqrt+0x176>
 8002f3c:	f1c1 0420 	rsb	r4, r1, #32
 8002f40:	fa22 f404 	lsr.w	r4, r2, r4
 8002f44:	1e4d      	subs	r5, r1, #1
 8002f46:	408a      	lsls	r2, r1
 8002f48:	4323      	orrs	r3, r4
 8002f4a:	1b41      	subs	r1, r0, r5
 8002f4c:	e772      	b.n	8002e34 <__ieee754_sqrt+0x58>
 8002f4e:	4608      	mov	r0, r1
 8002f50:	e7f0      	b.n	8002f34 <__ieee754_sqrt+0x158>
 8002f52:	005b      	lsls	r3, r3, #1
 8002f54:	3101      	adds	r1, #1
 8002f56:	e7ef      	b.n	8002f38 <__ieee754_sqrt+0x15c>
 8002f58:	46e0      	mov	r8, ip
 8002f5a:	e7aa      	b.n	8002eb2 <__ieee754_sqrt+0xd6>
 8002f5c:	f7fd f93a 	bl	80001d4 <__adddf3>
 8002f60:	e9da 8900 	ldrd	r8, r9, [sl]
 8002f64:	4602      	mov	r2, r0
 8002f66:	460b      	mov	r3, r1
 8002f68:	4640      	mov	r0, r8
 8002f6a:	4649      	mov	r1, r9
 8002f6c:	f7fd fd5a 	bl	8000a24 <__aeabi_dcmplt>
 8002f70:	b120      	cbz	r0, 8002f7c <__ieee754_sqrt+0x1a0>
 8002f72:	1ca0      	adds	r0, r4, #2
 8002f74:	bf08      	it	eq
 8002f76:	3501      	addeq	r5, #1
 8002f78:	3402      	adds	r4, #2
 8002f7a:	e7ca      	b.n	8002f12 <__ieee754_sqrt+0x136>
 8002f7c:	3401      	adds	r4, #1
 8002f7e:	f024 0401 	bic.w	r4, r4, #1
 8002f82:	e7c6      	b.n	8002f12 <__ieee754_sqrt+0x136>
 8002f84:	7ff00000 	.word	0x7ff00000
 8002f88:	20000080 	.word	0x20000080
 8002f8c:	20000088 	.word	0x20000088

08002f90 <_init>:
 8002f90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f92:	bf00      	nop
 8002f94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f96:	bc08      	pop	{r3}
 8002f98:	469e      	mov	lr, r3
 8002f9a:	4770      	bx	lr

08002f9c <_fini>:
 8002f9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f9e:	bf00      	nop
 8002fa0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002fa2:	bc08      	pop	{r3}
 8002fa4:	469e      	mov	lr, r3
 8002fa6:	4770      	bx	lr
